//
//   Pleiades Source Code
//   Copyright (C) 2023 Sienna Lloyd, Pleiades Authors
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: raft/v1/raft.proto

package raft

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderId *CommittedLeaderId `protobuf:"bytes,1,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	Index    uint64             `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *LogId) Reset() {
	*x = LogId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogId) ProtoMessage() {}

func (x *LogId) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogId.ProtoReflect.Descriptor instead.
func (*LogId) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{0}
}

func (x *LogId) GetLeaderId() *CommittedLeaderId {
	if x != nil {
		return x.LeaderId
	}
	return nil
}

func (x *LogId) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CommittedLeaderId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term   uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	NodeId uint64 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CommittedLeaderId) Reset() {
	*x = CommittedLeaderId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommittedLeaderId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommittedLeaderId) ProtoMessage() {}

func (x *CommittedLeaderId) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommittedLeaderId.ProtoReflect.Descriptor instead.
func (*CommittedLeaderId) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{1}
}

func (x *CommittedLeaderId) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CommittedLeaderId) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type LeaderId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term   uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	NodeId uint64 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *LeaderId) Reset() {
	*x = LeaderId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderId) ProtoMessage() {}

func (x *LeaderId) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderId.ProtoReflect.Descriptor instead.
func (*LeaderId) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{2}
}

func (x *LeaderId) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LeaderId) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderId  *LeaderId `protobuf:"bytes,1,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	Committed bool      `protobuf:"varint,2,opt,name=committed,proto3" json:"committed,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{3}
}

func (x *Vote) GetLeaderId() *LeaderId {
	if x != nil {
		return x.LeaderId
	}
	return nil
}

func (x *Vote) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

type VoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote      *Vote  `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	LastLogId *LogId `protobuf:"bytes,2,opt,name=last_log_id,json=lastLogId,proto3" json:"last_log_id,omitempty"`
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{4}
}

func (x *VoteRequest) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *VoteRequest) GetLastLogId() *LogId {
	if x != nil {
		return x.LastLogId
	}
	return nil
}

// The response to a `VoteRequest`
type VoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vote after a node handling vote-request.
	// Thus `resp.vote >= req.vote` always holds.
	Vote *Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	// Will be true if the candidate received a vote from the responder.
	VoteGranted bool `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"`
	// The last log id stored on the remote voter.
	LastLogId *LogId `protobuf:"bytes,3,opt,name=last_log_id,json=lastLogId,proto3,oneof" json:"last_log_id,omitempty"`
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{5}
}

func (x *VoteResponse) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *VoteResponse) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

func (x *VoteResponse) GetLastLogId() *LogId {
	if x != nil {
		return x.LastLogId
	}
	return nil
}

// Sent by the Raft leader to send chunks of a snapshot to a follower
type InstallSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	// Metadata of a snapshot: snapshot_id, last_log_ed membership etc.
	Metadata *SnapshotMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The byte offset where this chunk of data is positioned in the snapshot file.
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The raw bytes of the snapshot chunk, starting at `offset`.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Will be `true` if this is the last chunk in the snapshot.
	Done bool `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *InstallSnapshotRequest) Reset() {
	*x = InstallSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshotRequest) ProtoMessage() {}

func (x *InstallSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshotRequest.ProtoReflect.Descriptor instead.
func (*InstallSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{6}
}

func (x *InstallSnapshotRequest) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *InstallSnapshotRequest) GetMetadata() *SnapshotMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstallSnapshotRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *InstallSnapshotRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InstallSnapshotRequest) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

// The response to an `InstallSnapshotRequest`
type InstallSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *InstallSnapshotResponse) Reset() {
	*x = InstallSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshotResponse) ProtoMessage() {}

func (x *InstallSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshotResponse.ProtoReflect.Descriptor instead.
func (*InstallSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{7}
}

func (x *InstallSnapshotResponse) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Metadata regarding a snapshot
type SnapshotMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log entries upto which this snapshot includes, inclusive.
	LastLogId *LogId `protobuf:"bytes,1,opt,name=last_log_id,json=lastLogId,proto3,oneof" json:"last_log_id,omitempty"`
	// The last applied membership config.
	LastMembership *StoredMembership `protobuf:"bytes,2,opt,name=last_membership,json=lastMembership,proto3" json:"last_membership,omitempty"`
	// To identify a snapshot when transferring.
	// Caveat: even when two snapshot is built with the same `last_log_id`, they still could be
	// different in bytes.
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *SnapshotMetadata) Reset() {
	*x = SnapshotMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMetadata) ProtoMessage() {}

func (x *SnapshotMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMetadata.ProtoReflect.Descriptor instead.
func (*SnapshotMetadata) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{8}
}

func (x *SnapshotMetadata) GetLastLogId() *LogId {
	if x != nil {
		return x.LastLogId
	}
	return nil
}

func (x *SnapshotMetadata) GetLastMembership() *StoredMembership {
	if x != nil {
		return x.LastMembership
	}
	return nil
}

func (x *SnapshotMetadata) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

// This struct represents information about a membership config that has already been stored in the
// raft logs.
//
// It includes log id and a membership config. Such a record is used in the state machine or
// snapshot to track the last membership and its log id. And it is also used as a return value for
// functions that return membership and its log position.
type StoredMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the log that stores this membership config
	LogId *LogId `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3,oneof" json:"log_id,omitempty"`
	// Membership config
	Membership *Membership `protobuf:"bytes,2,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (x *StoredMembership) Reset() {
	*x = StoredMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredMembership) ProtoMessage() {}

func (x *StoredMembership) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredMembership.ProtoReflect.Descriptor instead.
func (*StoredMembership) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{9}
}

func (x *StoredMembership) GetLogId() *LogId {
	if x != nil {
		return x.LogId
	}
	return nil
}

func (x *StoredMembership) GetMembership() *Membership {
	if x != nil {
		return x.Membership
	}
	return nil
}

// The membership configuration of the cluster.
//
// It could be a joint of one, two or more configs, i.e., a quorum is a node set that is superset
// of a majority of every config.
type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A node-id key that is in `nodes` but is not in `configs` is a **learner**.
	Configs []uint64 `protobuf:"varint,1,rep,packed,name=configs,proto3" json:"configs,omitempty"`
	// Additional info of all nodes, e.g., the connecting host and port.
	Nodes map[uint64]*HostNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{10}
}

func (x *Membership) GetConfigs() []uint64 {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *Membership) GetNodes() map[uint64]*HostNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Information about the host node.
type HostNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *HostNode) Reset() {
	*x = HostNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostNode) ProtoMessage() {}

func (x *HostNode) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostNode.ProtoReflect.Descriptor instead.
func (*HostNode) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{11}
}

func (x *HostNode) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

// Sent by a cluster leader to replicate log entries (§5.3), and as a heartbeat (§5.2).
type AppendEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote      *Vote  `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	PrevLogId *LogId `protobuf:"bytes,2,opt,name=prev_log_id,json=prevLogId,proto3,oneof" json:"prev_log_id,omitempty"`
	// The new log entries to store.
	//
	// This may be empty when the leader is sending heartbeats. Entries
	// are batched for efficiency.
	Entries []*Entry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	// The leader's committed log id.
	LeaderCommit *LogId `protobuf:"bytes,4,opt,name=leader_commit,json=leaderCommit,proto3,oneof" json:"leader_commit,omitempty"`
}

func (x *AppendEntriesRequest) Reset() {
	*x = AppendEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesRequest) ProtoMessage() {}

func (x *AppendEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesRequest.ProtoReflect.Descriptor instead.
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{12}
}

func (x *AppendEntriesRequest) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *AppendEntriesRequest) GetPrevLogId() *LogId {
	if x != nil {
		return x.PrevLogId
	}
	return nil
}

func (x *AppendEntriesRequest) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *AppendEntriesRequest) GetLeaderCommit() *LogId {
	if x != nil {
		return x.LeaderCommit
	}
	return nil
}

// The response to an `AppendEntriesRequest`.
type AppendEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AppendEntriesResponse_Success
	//	*AppendEntriesResponse_Conflict
	//	*AppendEntriesResponse_HigherVote
	Response isAppendEntriesResponse_Response `protobuf_oneof:"response"`
}

func (x *AppendEntriesResponse) Reset() {
	*x = AppendEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesResponse) ProtoMessage() {}

func (x *AppendEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesResponse.ProtoReflect.Descriptor instead.
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{13}
}

func (m *AppendEntriesResponse) GetResponse() isAppendEntriesResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AppendEntriesResponse) GetSuccess() *Success {
	if x, ok := x.GetResponse().(*AppendEntriesResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *AppendEntriesResponse) GetConflict() *Conflict {
	if x, ok := x.GetResponse().(*AppendEntriesResponse_Conflict); ok {
		return x.Conflict
	}
	return nil
}

func (x *AppendEntriesResponse) GetHigherVote() *Vote {
	if x, ok := x.GetResponse().(*AppendEntriesResponse_HigherVote); ok {
		return x.HigherVote
	}
	return nil
}

type isAppendEntriesResponse_Response interface {
	isAppendEntriesResponse_Response()
}

type AppendEntriesResponse_Success struct {
	Success *Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type AppendEntriesResponse_Conflict struct {
	Conflict *Conflict `protobuf:"bytes,2,opt,name=conflict,proto3,oneof"`
}

type AppendEntriesResponse_HigherVote struct {
	// Seen a vote `v` that does not hold `mine_vote >= v`.
	// And a leader's vote(committed vote) must be total order with other vote.
	// Therefore it has to be a higher vote: `mine_vote < v`
	HigherVote *Vote `protobuf:"bytes,3,opt,name=higher_vote,json=higherVote,proto3,oneof"`
}

func (*AppendEntriesResponse_Success) isAppendEntriesResponse_Response() {}

func (*AppendEntriesResponse_Conflict) isAppendEntriesResponse_Response() {}

func (*AppendEntriesResponse_HigherVote) isAppendEntriesResponse_Response() {}

type Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Success) Reset() {
	*x = Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{14}
}

type Conflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Conflict) Reset() {
	*x = Conflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conflict) ProtoMessage() {}

func (x *Conflict) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conflict.ProtoReflect.Descriptor instead.
func (*Conflict) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{15}
}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId *LogId `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	// This entry's payload.
	// todo (sienna): this should actually be a oneof
	//
	// Types that are assignable to Payload:
	//
	//	*Entry_Blank
	//	*Entry_Normal
	//	*Entry_Membership
	Payload isEntry_Payload `protobuf_oneof:"payload"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{16}
}

func (x *Entry) GetLogId() *LogId {
	if x != nil {
		return x.LogId
	}
	return nil
}

func (m *Entry) GetPayload() isEntry_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Entry) GetBlank() *Blank {
	if x, ok := x.GetPayload().(*Entry_Blank); ok {
		return x.Blank
	}
	return nil
}

func (x *Entry) GetNormal() *RaftEntryRequest {
	if x, ok := x.GetPayload().(*Entry_Normal); ok {
		return x.Normal
	}
	return nil
}

func (x *Entry) GetMembership() *Membership {
	if x, ok := x.GetPayload().(*Entry_Membership); ok {
		return x.Membership
	}
	return nil
}

type isEntry_Payload interface {
	isEntry_Payload()
}

type Entry_Blank struct {
	Blank *Blank `protobuf:"bytes,2,opt,name=blank,proto3,oneof"`
}

type Entry_Normal struct {
	Normal *RaftEntryRequest `protobuf:"bytes,3,opt,name=normal,proto3,oneof"`
}

type Entry_Membership struct {
	Membership *Membership `protobuf:"bytes,4,opt,name=membership,proto3,oneof"`
}

func (*Entry_Blank) isEntry_Payload() {}

func (*Entry_Normal) isEntry_Payload() {}

func (*Entry_Membership) isEntry_Payload() {}

type Blank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Blank) Reset() {
	*x = Blank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blank) ProtoMessage() {}

func (x *Blank) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blank.ProtoReflect.Descriptor instead.
func (*Blank) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{17}
}

type RaftEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*RaftEntryRequest_GetKey
	//	*RaftEntryRequest_PutKey
	//	*RaftEntryRequest_DeleteKey
	Request isRaftEntryRequest_Request `protobuf_oneof:"request"`
}

func (x *RaftEntryRequest) Reset() {
	*x = RaftEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftEntryRequest) ProtoMessage() {}

func (x *RaftEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftEntryRequest.ProtoReflect.Descriptor instead.
func (*RaftEntryRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{18}
}

func (m *RaftEntryRequest) GetRequest() isRaftEntryRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RaftEntryRequest) GetGetKey() *RaftGetKeyRequest {
	if x, ok := x.GetRequest().(*RaftEntryRequest_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *RaftEntryRequest) GetPutKey() *RaftPutKeyRequest {
	if x, ok := x.GetRequest().(*RaftEntryRequest_PutKey); ok {
		return x.PutKey
	}
	return nil
}

func (x *RaftEntryRequest) GetDeleteKey() *RaftDeleteKeyRequest {
	if x, ok := x.GetRequest().(*RaftEntryRequest_DeleteKey); ok {
		return x.DeleteKey
	}
	return nil
}

type isRaftEntryRequest_Request interface {
	isRaftEntryRequest_Request()
}

type RaftEntryRequest_GetKey struct {
	GetKey *RaftGetKeyRequest `protobuf:"bytes,1,opt,name=get_key,json=getKey,proto3,oneof"`
}

type RaftEntryRequest_PutKey struct {
	PutKey *RaftPutKeyRequest `protobuf:"bytes,2,opt,name=put_key,json=putKey,proto3,oneof"`
}

type RaftEntryRequest_DeleteKey struct {
	DeleteKey *RaftDeleteKeyRequest `protobuf:"bytes,3,opt,name=delete_key,json=deleteKey,proto3,oneof"`
}

func (*RaftEntryRequest_GetKey) isRaftEntryRequest_Request() {}

func (*RaftEntryRequest_PutKey) isRaftEntryRequest_Request() {}

func (*RaftEntryRequest_DeleteKey) isRaftEntryRequest_Request() {}

type RaftEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*RaftEntryResponse_GetKey
	//	*RaftEntryResponse_PutKey
	//	*RaftEntryResponse_DeleteKey
	Response isRaftEntryResponse_Response `protobuf_oneof:"response"`
}

func (x *RaftEntryResponse) Reset() {
	*x = RaftEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftEntryResponse) ProtoMessage() {}

func (x *RaftEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftEntryResponse.ProtoReflect.Descriptor instead.
func (*RaftEntryResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{19}
}

func (m *RaftEntryResponse) GetResponse() isRaftEntryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RaftEntryResponse) GetGetKey() *RaftGetKeyResponse {
	if x, ok := x.GetResponse().(*RaftEntryResponse_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *RaftEntryResponse) GetPutKey() *RaftPutKeyResponse {
	if x, ok := x.GetResponse().(*RaftEntryResponse_PutKey); ok {
		return x.PutKey
	}
	return nil
}

func (x *RaftEntryResponse) GetDeleteKey() *RaftDeleteKeyResponse {
	if x, ok := x.GetResponse().(*RaftEntryResponse_DeleteKey); ok {
		return x.DeleteKey
	}
	return nil
}

type isRaftEntryResponse_Response interface {
	isRaftEntryResponse_Response()
}

type RaftEntryResponse_GetKey struct {
	GetKey *RaftGetKeyResponse `protobuf:"bytes,1,opt,name=get_key,json=getKey,proto3,oneof"`
}

type RaftEntryResponse_PutKey struct {
	PutKey *RaftPutKeyResponse `protobuf:"bytes,2,opt,name=put_key,json=putKey,proto3,oneof"`
}

type RaftEntryResponse_DeleteKey struct {
	DeleteKey *RaftDeleteKeyResponse `protobuf:"bytes,3,opt,name=delete_key,json=deleteKey,proto3,oneof"`
}

func (*RaftEntryResponse_GetKey) isRaftEntryResponse_Response() {}

func (*RaftEntryResponse_PutKey) isRaftEntryResponse_Response() {}

func (*RaftEntryResponse_DeleteKey) isRaftEntryResponse_Response() {}

type RaftGetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range   []byte  `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Key     []byte  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Version *uint64 `protobuf:"varint,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *RaftGetKeyRequest) Reset() {
	*x = RaftGetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftGetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftGetKeyRequest) ProtoMessage() {}

func (x *RaftGetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftGetKeyRequest.ProtoReflect.Descriptor instead.
func (*RaftGetKeyRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{20}
}

func (x *RaftGetKeyRequest) GetRange() []byte {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *RaftGetKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RaftGetKeyRequest) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type RaftGetKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Kvp    *KeyValuePair  `protobuf:"bytes,2,opt,name=kvp,proto3,oneof" json:"kvp,omitempty"`
}

func (x *RaftGetKeyResponse) Reset() {
	*x = RaftGetKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftGetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftGetKeyResponse) ProtoMessage() {}

func (x *RaftGetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftGetKeyResponse.ProtoReflect.Descriptor instead.
func (*RaftGetKeyResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{21}
}

func (x *RaftGetKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RaftGetKeyResponse) GetKvp() *KeyValuePair {
	if x != nil {
		return x.Kvp
	}
	return nil
}

type RaftPutKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range []byte        `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Kvp   *KeyValuePair `protobuf:"bytes,2,opt,name=kvp,proto3" json:"kvp,omitempty"`
}

func (x *RaftPutKeyRequest) Reset() {
	*x = RaftPutKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftPutKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPutKeyRequest) ProtoMessage() {}

func (x *RaftPutKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPutKeyRequest.ProtoReflect.Descriptor instead.
func (*RaftPutKeyRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{22}
}

func (x *RaftPutKeyRequest) GetRange() []byte {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *RaftPutKeyRequest) GetKvp() *KeyValuePair {
	if x != nil {
		return x.Kvp
	}
	return nil
}

type RaftPutKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RaftPutKeyResponse) Reset() {
	*x = RaftPutKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftPutKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPutKeyResponse) ProtoMessage() {}

func (x *RaftPutKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPutKeyResponse.ProtoReflect.Descriptor instead.
func (*RaftPutKeyResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{23}
}

func (x *RaftPutKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RaftDeleteKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range []byte `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RaftDeleteKeyRequest) Reset() {
	*x = RaftDeleteKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftDeleteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftDeleteKeyRequest) ProtoMessage() {}

func (x *RaftDeleteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftDeleteKeyRequest.ProtoReflect.Descriptor instead.
func (*RaftDeleteKeyRequest) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{24}
}

func (x *RaftDeleteKeyRequest) GetRange() []byte {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *RaftDeleteKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type RaftDeleteKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RaftDeleteKeyResponse) Reset() {
	*x = RaftDeleteKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftDeleteKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftDeleteKeyResponse) ProtoMessage() {}

func (x *RaftDeleteKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftDeleteKeyResponse.ProtoReflect.Descriptor instead.
func (*RaftDeleteKeyResponse) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{25}
}

func (x *RaftDeleteKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type MetaKeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard uint64        `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Kvp   *KeyValuePair `protobuf:"bytes,2,opt,name=kvp,proto3" json:"kvp,omitempty"`
}

func (x *MetaKeyValuePair) Reset() {
	*x = MetaKeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaKeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaKeyValuePair) ProtoMessage() {}

func (x *MetaKeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaKeyValuePair.ProtoReflect.Descriptor instead.
func (*MetaKeyValuePair) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{26}
}

func (x *MetaKeyValuePair) GetShard() uint64 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *MetaKeyValuePair) GetKvp() *KeyValuePair {
	if x != nil {
		return x.Kvp
	}
	return nil
}

// A core key-value pair. A key-value pair is a key, a value, and some metadata.
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the key in bytes. An empty key is not allowed.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// create_revision is the revision of last creation on this key.
	CreateRevision uint64 `protobuf:"varint,2,opt,name=create_revision,json=createRevision,proto3" json:"create_revision,omitempty"`
	// mod_revision is the revision of last modification on this key.
	ModRevision uint64 `protobuf:"varint,3,opt,name=mod_revision,json=modRevision,proto3" json:"mod_revision,omitempty"`
	// version is the version of the key. A deletion resets
	// the version to zero and any modification of the key
	// increases its version.
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// value is the value held by the key, in bytes.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// lease is the ID of the lease that attached to key.
	// When the attached lease expires, the key will be deleted.
	// If lease is 0, then no lease is attached to the key.
	Lease uint64 `protobuf:"varint,6,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_raft_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_raft_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_raft_v1_raft_proto_rawDescGZIP(), []int{27}
}

func (x *KeyValuePair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePair) GetCreateRevision() uint64 {
	if x != nil {
		return x.CreateRevision
	}
	return 0
}

func (x *KeyValuePair) GetModRevision() uint64 {
	if x != nil {
		return x.ModRevision
	}
	return 0
}

func (x *KeyValuePair) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *KeyValuePair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyValuePair) GetLease() uint64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

var File_raft_v1_raft_proto protoreflect.FileDescriptor

var file_raft_v1_raft_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x40,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x04, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22,
	0x60, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x22, 0xb2, 0x01,
	0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x22, 0x3c, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x22,
	0x7e, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x22,
	0xa9, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4b,
	0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x48, 0x01, 0x52,
	0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x22, 0xcd, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x35,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x07, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x52, 0x61,
	0x66, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x67,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x66, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x67,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x52, 0x61,
	0x66, 0x74, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x12, 0x52, 0x61, 0x66, 0x74, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x6b, 0x76, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x76, 0x70, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x76, 0x70, 0x22, 0x52, 0x0a, 0x11, 0x52, 0x61,
	0x66, 0x74, 0x50, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x76, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x6b, 0x76, 0x70, 0x22, 0x40,
	0x0a, 0x12, 0x52, 0x61, 0x66, 0x74, 0x50, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3e, 0x0a, 0x14, 0x52, 0x61, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x43, 0x0a, 0x15, 0x52, 0x61, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12,
	0x27, 0x0a, 0x03, 0x6b, 0x76, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x03, 0x6b, 0x76, 0x70, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x32, 0xee, 0x01,
	0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x7e,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x52,
	0x61, 0x66, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x70, 0x6c, 0x75, 0x73, 0x62, 0x2f, 0x70,
	0x6c, 0x65, 0x69, 0x61, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x61, 0x66, 0x74, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x66, 0x74,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x52, 0x61, 0x66, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13,
	0x52, 0x61, 0x66, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61, 0x66, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raft_v1_raft_proto_rawDescOnce sync.Once
	file_raft_v1_raft_proto_rawDescData = file_raft_v1_raft_proto_rawDesc
)

func file_raft_v1_raft_proto_rawDescGZIP() []byte {
	file_raft_v1_raft_proto_rawDescOnce.Do(func() {
		file_raft_v1_raft_proto_rawDescData = protoimpl.X.CompressGZIP(file_raft_v1_raft_proto_rawDescData)
	})
	return file_raft_v1_raft_proto_rawDescData
}

var file_raft_v1_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_raft_v1_raft_proto_goTypes = []interface{}{
	(*LogId)(nil),                   // 0: raft.v1.LogId
	(*CommittedLeaderId)(nil),       // 1: raft.v1.CommittedLeaderId
	(*LeaderId)(nil),                // 2: raft.v1.LeaderId
	(*Vote)(nil),                    // 3: raft.v1.Vote
	(*VoteRequest)(nil),             // 4: raft.v1.VoteRequest
	(*VoteResponse)(nil),            // 5: raft.v1.VoteResponse
	(*InstallSnapshotRequest)(nil),  // 6: raft.v1.InstallSnapshotRequest
	(*InstallSnapshotResponse)(nil), // 7: raft.v1.InstallSnapshotResponse
	(*SnapshotMetadata)(nil),        // 8: raft.v1.SnapshotMetadata
	(*StoredMembership)(nil),        // 9: raft.v1.StoredMembership
	(*Membership)(nil),              // 10: raft.v1.Membership
	(*HostNode)(nil),                // 11: raft.v1.HostNode
	(*AppendEntriesRequest)(nil),    // 12: raft.v1.AppendEntriesRequest
	(*AppendEntriesResponse)(nil),   // 13: raft.v1.AppendEntriesResponse
	(*Success)(nil),                 // 14: raft.v1.Success
	(*Conflict)(nil),                // 15: raft.v1.Conflict
	(*Entry)(nil),                   // 16: raft.v1.Entry
	(*Blank)(nil),                   // 17: raft.v1.Blank
	(*RaftEntryRequest)(nil),        // 18: raft.v1.RaftEntryRequest
	(*RaftEntryResponse)(nil),       // 19: raft.v1.RaftEntryResponse
	(*RaftGetKeyRequest)(nil),       // 20: raft.v1.RaftGetKeyRequest
	(*RaftGetKeyResponse)(nil),      // 21: raft.v1.RaftGetKeyResponse
	(*RaftPutKeyRequest)(nil),       // 22: raft.v1.RaftPutKeyRequest
	(*RaftPutKeyResponse)(nil),      // 23: raft.v1.RaftPutKeyResponse
	(*RaftDeleteKeyRequest)(nil),    // 24: raft.v1.RaftDeleteKeyRequest
	(*RaftDeleteKeyResponse)(nil),   // 25: raft.v1.RaftDeleteKeyResponse
	(*MetaKeyValuePair)(nil),        // 26: raft.v1.MetaKeyValuePair
	(*KeyValuePair)(nil),            // 27: raft.v1.KeyValuePair
	nil,                             // 28: raft.v1.Membership.NodesEntry
	(*status.Status)(nil),           // 29: google.rpc.Status
}
var file_raft_v1_raft_proto_depIdxs = []int32{
	1,  // 0: raft.v1.LogId.leader_id:type_name -> raft.v1.CommittedLeaderId
	2,  // 1: raft.v1.Vote.leader_id:type_name -> raft.v1.LeaderId
	3,  // 2: raft.v1.VoteRequest.vote:type_name -> raft.v1.Vote
	0,  // 3: raft.v1.VoteRequest.last_log_id:type_name -> raft.v1.LogId
	3,  // 4: raft.v1.VoteResponse.vote:type_name -> raft.v1.Vote
	0,  // 5: raft.v1.VoteResponse.last_log_id:type_name -> raft.v1.LogId
	3,  // 6: raft.v1.InstallSnapshotRequest.vote:type_name -> raft.v1.Vote
	8,  // 7: raft.v1.InstallSnapshotRequest.metadata:type_name -> raft.v1.SnapshotMetadata
	3,  // 8: raft.v1.InstallSnapshotResponse.vote:type_name -> raft.v1.Vote
	0,  // 9: raft.v1.SnapshotMetadata.last_log_id:type_name -> raft.v1.LogId
	9,  // 10: raft.v1.SnapshotMetadata.last_membership:type_name -> raft.v1.StoredMembership
	0,  // 11: raft.v1.StoredMembership.log_id:type_name -> raft.v1.LogId
	10, // 12: raft.v1.StoredMembership.membership:type_name -> raft.v1.Membership
	28, // 13: raft.v1.Membership.nodes:type_name -> raft.v1.Membership.NodesEntry
	3,  // 14: raft.v1.AppendEntriesRequest.vote:type_name -> raft.v1.Vote
	0,  // 15: raft.v1.AppendEntriesRequest.prev_log_id:type_name -> raft.v1.LogId
	16, // 16: raft.v1.AppendEntriesRequest.entries:type_name -> raft.v1.Entry
	0,  // 17: raft.v1.AppendEntriesRequest.leader_commit:type_name -> raft.v1.LogId
	14, // 18: raft.v1.AppendEntriesResponse.success:type_name -> raft.v1.Success
	15, // 19: raft.v1.AppendEntriesResponse.conflict:type_name -> raft.v1.Conflict
	3,  // 20: raft.v1.AppendEntriesResponse.higher_vote:type_name -> raft.v1.Vote
	0,  // 21: raft.v1.Entry.log_id:type_name -> raft.v1.LogId
	17, // 22: raft.v1.Entry.blank:type_name -> raft.v1.Blank
	18, // 23: raft.v1.Entry.normal:type_name -> raft.v1.RaftEntryRequest
	10, // 24: raft.v1.Entry.membership:type_name -> raft.v1.Membership
	20, // 25: raft.v1.RaftEntryRequest.get_key:type_name -> raft.v1.RaftGetKeyRequest
	22, // 26: raft.v1.RaftEntryRequest.put_key:type_name -> raft.v1.RaftPutKeyRequest
	24, // 27: raft.v1.RaftEntryRequest.delete_key:type_name -> raft.v1.RaftDeleteKeyRequest
	21, // 28: raft.v1.RaftEntryResponse.get_key:type_name -> raft.v1.RaftGetKeyResponse
	23, // 29: raft.v1.RaftEntryResponse.put_key:type_name -> raft.v1.RaftPutKeyResponse
	25, // 30: raft.v1.RaftEntryResponse.delete_key:type_name -> raft.v1.RaftDeleteKeyResponse
	29, // 31: raft.v1.RaftGetKeyResponse.status:type_name -> google.rpc.Status
	27, // 32: raft.v1.RaftGetKeyResponse.kvp:type_name -> raft.v1.KeyValuePair
	27, // 33: raft.v1.RaftPutKeyRequest.kvp:type_name -> raft.v1.KeyValuePair
	29, // 34: raft.v1.RaftPutKeyResponse.status:type_name -> google.rpc.Status
	29, // 35: raft.v1.RaftDeleteKeyResponse.status:type_name -> google.rpc.Status
	27, // 36: raft.v1.MetaKeyValuePair.kvp:type_name -> raft.v1.KeyValuePair
	11, // 37: raft.v1.Membership.NodesEntry.value:type_name -> raft.v1.HostNode
	4,  // 38: raft.v1.RaftService.Vote:input_type -> raft.v1.VoteRequest
	12, // 39: raft.v1.RaftService.AppendEntries:input_type -> raft.v1.AppendEntriesRequest
	6,  // 40: raft.v1.RaftService.InstallSnapshot:input_type -> raft.v1.InstallSnapshotRequest
	5,  // 41: raft.v1.RaftService.Vote:output_type -> raft.v1.VoteResponse
	13, // 42: raft.v1.RaftService.AppendEntries:output_type -> raft.v1.AppendEntriesResponse
	7,  // 43: raft.v1.RaftService.InstallSnapshot:output_type -> raft.v1.InstallSnapshotResponse
	41, // [41:44] is the sub-list for method output_type
	38, // [38:41] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_raft_v1_raft_proto_init() }
func file_raft_v1_raft_proto_init() {
	if File_raft_v1_raft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raft_v1_raft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommittedLeaderId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftGetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftGetKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftPutKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftPutKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftDeleteKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftDeleteKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaKeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_raft_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_raft_v1_raft_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_raft_v1_raft_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_raft_v1_raft_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_raft_v1_raft_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_raft_v1_raft_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*AppendEntriesResponse_Success)(nil),
		(*AppendEntriesResponse_Conflict)(nil),
		(*AppendEntriesResponse_HigherVote)(nil),
	}
	file_raft_v1_raft_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Entry_Blank)(nil),
		(*Entry_Normal)(nil),
		(*Entry_Membership)(nil),
	}
	file_raft_v1_raft_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*RaftEntryRequest_GetKey)(nil),
		(*RaftEntryRequest_PutKey)(nil),
		(*RaftEntryRequest_DeleteKey)(nil),
	}
	file_raft_v1_raft_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*RaftEntryResponse_GetKey)(nil),
		(*RaftEntryResponse_PutKey)(nil),
		(*RaftEntryResponse_DeleteKey)(nil),
	}
	file_raft_v1_raft_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_raft_v1_raft_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raft_v1_raft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raft_v1_raft_proto_goTypes,
		DependencyIndexes: file_raft_v1_raft_proto_depIdxs,
		MessageInfos:      file_raft_v1_raft_proto_msgTypes,
	}.Build()
	File_raft_v1_raft_proto = out.File
	file_raft_v1_raft_proto_rawDesc = nil
	file_raft_v1_raft_proto_goTypes = nil
	file_raft_v1_raft_proto_depIdxs = nil
}
