//
//   Pleiades Source Code
//   Copyright (C) 2023 Sienna Lloyd, Pleiades Authors
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: raft/v1/metadata.proto

package raft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColumnFamilyType int32

const (
	ColumnFamilyType_COLUMN_FAMILY_TYPE_UNSPECIFIED ColumnFamilyType = 0
	ColumnFamilyType_COLUMN_FAMILY_TYPE_CONFIG      ColumnFamilyType = 1
	ColumnFamilyType_COLUMN_FAMILY_TYPE_RAFT_LOG    ColumnFamilyType = 2
	ColumnFamilyType_COLUMN_FAMILY_TYPE_DATA        ColumnFamilyType = 3
	ColumnFamilyType_COLUMN_FAMILY_TYPE_VOTE        ColumnFamilyType = 4
)

// Enum value maps for ColumnFamilyType.
var (
	ColumnFamilyType_name = map[int32]string{
		0: "COLUMN_FAMILY_TYPE_UNSPECIFIED",
		1: "COLUMN_FAMILY_TYPE_CONFIG",
		2: "COLUMN_FAMILY_TYPE_RAFT_LOG",
		3: "COLUMN_FAMILY_TYPE_DATA",
		4: "COLUMN_FAMILY_TYPE_VOTE",
	}
	ColumnFamilyType_value = map[string]int32{
		"COLUMN_FAMILY_TYPE_UNSPECIFIED": 0,
		"COLUMN_FAMILY_TYPE_CONFIG":      1,
		"COLUMN_FAMILY_TYPE_RAFT_LOG":    2,
		"COLUMN_FAMILY_TYPE_DATA":        3,
		"COLUMN_FAMILY_TYPE_VOTE":        4,
	}
)

func (x ColumnFamilyType) Enum() *ColumnFamilyType {
	p := new(ColumnFamilyType)
	*p = x
	return p
}

func (x ColumnFamilyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnFamilyType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_v1_metadata_proto_enumTypes[0].Descriptor()
}

func (ColumnFamilyType) Type() protoreflect.EnumType {
	return &file_raft_v1_metadata_proto_enumTypes[0]
}

func (x ColumnFamilyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnFamilyType.Descriptor instead.
func (ColumnFamilyType) EnumDescriptor() ([]byte, []int) {
	return file_raft_v1_metadata_proto_rawDescGZIP(), []int{0}
}

type ColumnFamilies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnFamilies []*ColumnFamilyDescriptor `protobuf:"bytes,1,rep,name=column_families,json=columnFamilies,proto3" json:"column_families,omitempty"`
}

func (x *ColumnFamilies) Reset() {
	*x = ColumnFamilies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFamilies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFamilies) ProtoMessage() {}

func (x *ColumnFamilies) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFamilies.ProtoReflect.Descriptor instead.
func (*ColumnFamilies) Descriptor() ([]byte, []int) {
	return file_raft_v1_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnFamilies) GetColumnFamilies() []*ColumnFamilyDescriptor {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

type ColumnFamilyDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range uint64           `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`
	Shard uint64           `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Type  ColumnFamilyType `protobuf:"varint,3,opt,name=type,proto3,enum=raft.v1.ColumnFamilyType" json:"type,omitempty"`
}

func (x *ColumnFamilyDescriptor) Reset() {
	*x = ColumnFamilyDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_v1_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFamilyDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFamilyDescriptor) ProtoMessage() {}

func (x *ColumnFamilyDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_raft_v1_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFamilyDescriptor.ProtoReflect.Descriptor instead.
func (*ColumnFamilyDescriptor) Descriptor() ([]byte, []int) {
	return file_raft_v1_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnFamilyDescriptor) GetRange() uint64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *ColumnFamilyDescriptor) GetShard() uint64 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *ColumnFamilyDescriptor) GetType() ColumnFamilyType {
	if x != nil {
		return x.Type
	}
	return ColumnFamilyType_COLUMN_FAMILY_TYPE_UNSPECIFIED
}

var File_raft_v1_metadata_proto protoreflect.FileDescriptor

var file_raft_v1_metadata_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76,
	0x31, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x73, 0x0a,
	0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x2a, 0xb0, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x4f, 0x54, 0x45, 0x10, 0x04, 0x42, 0x82, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x70, 0x6c, 0x75, 0x73, 0x62, 0x2f, 0x70, 0x6c, 0x65, 0x69, 0x61,
	0x64, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x66, 0x74, 0xa2,
	0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x07, 0x52, 0x61, 0x66, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x66, 0x74,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x08, 0x52, 0x61, 0x66, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_raft_v1_metadata_proto_rawDescOnce sync.Once
	file_raft_v1_metadata_proto_rawDescData = file_raft_v1_metadata_proto_rawDesc
)

func file_raft_v1_metadata_proto_rawDescGZIP() []byte {
	file_raft_v1_metadata_proto_rawDescOnce.Do(func() {
		file_raft_v1_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_raft_v1_metadata_proto_rawDescData)
	})
	return file_raft_v1_metadata_proto_rawDescData
}

var file_raft_v1_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_raft_v1_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_raft_v1_metadata_proto_goTypes = []interface{}{
	(ColumnFamilyType)(0),          // 0: raft.v1.ColumnFamilyType
	(*ColumnFamilies)(nil),         // 1: raft.v1.ColumnFamilies
	(*ColumnFamilyDescriptor)(nil), // 2: raft.v1.ColumnFamilyDescriptor
}
var file_raft_v1_metadata_proto_depIdxs = []int32{
	2, // 0: raft.v1.ColumnFamilies.column_families:type_name -> raft.v1.ColumnFamilyDescriptor
	0, // 1: raft.v1.ColumnFamilyDescriptor.type:type_name -> raft.v1.ColumnFamilyType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_raft_v1_metadata_proto_init() }
func file_raft_v1_metadata_proto_init() {
	if File_raft_v1_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raft_v1_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFamilies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_v1_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFamilyDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raft_v1_metadata_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raft_v1_metadata_proto_goTypes,
		DependencyIndexes: file_raft_v1_metadata_proto_depIdxs,
		EnumInfos:         file_raft_v1_metadata_proto_enumTypes,
		MessageInfos:      file_raft_v1_metadata_proto_msgTypes,
	}.Build()
	File_raft_v1_metadata_proto = out.File
	file_raft_v1_metadata_proto_rawDesc = nil
	file_raft_v1_metadata_proto_goTypes = nil
	file_raft_v1_metadata_proto_depIdxs = nil
}
