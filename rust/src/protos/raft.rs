// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `raft.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Entry {
    // message fields
    pub entry_type: EntryType,
    pub term: u64,
    pub index: u64,
    pub data: ::bytes::Bytes,
    pub context: ::bytes::Bytes,
    pub sync_log: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Entry {
    fn default() -> &'a Entry {
        <Entry as ::protobuf::Message>::default_instance()
    }
}

impl Entry {
    pub fn new() -> Entry {
        ::std::default::Default::default()
    }

    // .raft.v1.EntryType entry_type = 1;


    pub fn get_entry_type(&self) -> EntryType {
        self.entry_type
    }
    pub fn clear_entry_type(&mut self) {
        self.entry_type = EntryType::EntryNormal;
    }

    // Param is passed by value, moved
    pub fn set_entry_type(&mut self, v: EntryType) {
        self.entry_type = v;
    }

    // uint64 term = 2;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 index = 3;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.data, ::bytes::Bytes::new())
    }

    // bytes context = 6;


    pub fn get_context(&self) -> &[u8] {
        &self.context
    }
    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ::bytes::Bytes) {
        self.context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ::bytes::Bytes {
        &mut self.context
    }

    // Take field
    pub fn take_context(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.context, ::bytes::Bytes::new())
    }

    // bool sync_log = 5;


    pub fn get_sync_log(&self) -> bool {
        self.sync_log
    }
    pub fn clear_sync_log(&mut self) {
        self.sync_log = false;
    }

    // Param is passed by value, moved
    pub fn set_sync_log(&mut self, v: bool) {
        self.sync_log = v;
    }
}

impl ::protobuf::Message for Entry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.entry_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.data)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.context)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.sync_log = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.entry_type != EntryType::EntryNormal {
            my_size += ::protobuf::rt::enum_size(1, self.entry_type);
        }
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(2, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        if !self.context.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.context);
        }
        if self.sync_log != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.entry_type != EntryType::EntryNormal {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.entry_type))?;
        }
        if self.term != 0 {
            os.write_uint64(2, self.term)?;
        }
        if self.index != 0 {
            os.write_uint64(3, self.index)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        if !self.context.is_empty() {
            os.write_bytes(6, &self.context)?;
        }
        if self.sync_log != false {
            os.write_bool(5, self.sync_log)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Entry {
        Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EntryType>>(
                "entry_type",
                |m: &Entry| { &m.entry_type },
                |m: &mut Entry| { &mut m.entry_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &Entry| { &m.term },
                |m: &mut Entry| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &Entry| { &m.index },
                |m: &mut Entry| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "data",
                |m: &Entry| { &m.data },
                |m: &mut Entry| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "context",
                |m: &Entry| { &m.context },
                |m: &mut Entry| { &mut m.context },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "sync_log",
                |m: &Entry| { &m.sync_log },
                |m: &mut Entry| { &mut m.sync_log },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Entry>(
                "Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Entry {
        static instance: ::protobuf::rt::LazyV2<Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Entry::new)
    }
}

impl ::protobuf::Clear for Entry {
    fn clear(&mut self) {
        self.entry_type = EntryType::EntryNormal;
        self.term = 0;
        self.index = 0;
        self.data.clear();
        self.context.clear();
        self.sync_log = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotMetadata {
    // message fields
    pub conf_state: ::protobuf::SingularPtrField<ConfState>,
    pub index: u64,
    pub term: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SnapshotMetadata {
    fn default() -> &'a SnapshotMetadata {
        <SnapshotMetadata as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotMetadata {
    pub fn new() -> SnapshotMetadata {
        ::std::default::Default::default()
    }

    // .raft.v1.ConfState conf_state = 1;


    pub fn get_conf_state(&self) -> &ConfState {
        self.conf_state.as_ref().unwrap_or_else(|| <ConfState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conf_state(&mut self) {
        self.conf_state.clear();
    }

    pub fn has_conf_state(&self) -> bool {
        self.conf_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conf_state(&mut self, v: ConfState) {
        self.conf_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conf_state(&mut self) -> &mut ConfState {
        if self.conf_state.is_none() {
            self.conf_state.set_default();
        }
        self.conf_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_conf_state(&mut self) -> ConfState {
        self.conf_state.take().unwrap_or_else(|| ConfState::new())
    }

    // uint64 index = 2;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // uint64 term = 3;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }
}

impl ::protobuf::Message for SnapshotMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.conf_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conf_state)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conf_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(3, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conf_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.index != 0 {
            os.write_uint64(2, self.index)?;
        }
        if self.term != 0 {
            os.write_uint64(3, self.term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotMetadata {
        SnapshotMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConfState>>(
                "conf_state",
                |m: &SnapshotMetadata| { &m.conf_state },
                |m: &mut SnapshotMetadata| { &mut m.conf_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &SnapshotMetadata| { &m.index },
                |m: &mut SnapshotMetadata| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &SnapshotMetadata| { &m.term },
                |m: &mut SnapshotMetadata| { &mut m.term },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SnapshotMetadata>(
                "SnapshotMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SnapshotMetadata {
        static instance: ::protobuf::rt::LazyV2<SnapshotMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SnapshotMetadata::new)
    }
}

impl ::protobuf::Clear for SnapshotMetadata {
    fn clear(&mut self) {
        self.conf_state.clear();
        self.index = 0;
        self.term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SnapshotMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Snapshot {
    // message fields
    pub data: ::bytes::Bytes,
    pub metadata: ::protobuf::SingularPtrField<SnapshotMetadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Snapshot {
    fn default() -> &'a Snapshot {
        <Snapshot as ::protobuf::Message>::default_instance()
    }
}

impl Snapshot {
    pub fn new() -> Snapshot {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.data, ::bytes::Bytes::new())
    }

    // .raft.v1.SnapshotMetadata metadata = 2;


    pub fn get_metadata(&self) -> &SnapshotMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <SnapshotMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: SnapshotMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut SnapshotMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> SnapshotMetadata {
        self.metadata.take().unwrap_or_else(|| SnapshotMetadata::new())
    }
}

impl ::protobuf::Message for Snapshot {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Snapshot {
        Snapshot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "data",
                |m: &Snapshot| { &m.data },
                |m: &mut Snapshot| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SnapshotMetadata>>(
                "metadata",
                |m: &Snapshot| { &m.metadata },
                |m: &mut Snapshot| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Snapshot>(
                "Snapshot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Snapshot {
        static instance: ::protobuf::rt::LazyV2<Snapshot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Snapshot::new)
    }
}

impl ::protobuf::Clear for Snapshot {
    fn clear(&mut self) {
        self.data.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Snapshot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Snapshot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub msg_type: MessageType,
    pub to: u64,
    pub from: u64,
    pub term: u64,
    pub log_term: u64,
    pub index: u64,
    pub entries: ::protobuf::RepeatedField<Entry>,
    pub commit: u64,
    pub commit_term: u64,
    pub snapshot: ::protobuf::SingularPtrField<Snapshot>,
    pub request_snapshot: u64,
    pub reject: bool,
    pub reject_hint: u64,
    pub context: ::bytes::Bytes,
    pub deprecated_priority: u64,
    pub priority: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .raft.v1.MessageType msg_type = 1;


    pub fn get_msg_type(&self) -> MessageType {
        self.msg_type
    }
    pub fn clear_msg_type(&mut self) {
        self.msg_type = MessageType::MsgHup;
    }

    // Param is passed by value, moved
    pub fn set_msg_type(&mut self, v: MessageType) {
        self.msg_type = v;
    }

    // uint64 to = 2;


    pub fn get_to(&self) -> u64 {
        self.to
    }
    pub fn clear_to(&mut self) {
        self.to = 0;
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: u64) {
        self.to = v;
    }

    // uint64 from = 3;


    pub fn get_from(&self) -> u64 {
        self.from
    }
    pub fn clear_from(&mut self) {
        self.from = 0;
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: u64) {
        self.from = v;
    }

    // uint64 term = 4;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 log_term = 5;


    pub fn get_log_term(&self) -> u64 {
        self.log_term
    }
    pub fn clear_log_term(&mut self) {
        self.log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_log_term(&mut self, v: u64) {
        self.log_term = v;
    }

    // uint64 index = 6;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // repeated .raft.v1.Entry entries = 7;


    pub fn get_entries(&self) -> &[Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // uint64 commit = 8;


    pub fn get_commit(&self) -> u64 {
        self.commit
    }
    pub fn clear_commit(&mut self) {
        self.commit = 0;
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: u64) {
        self.commit = v;
    }

    // uint64 commit_term = 15;


    pub fn get_commit_term(&self) -> u64 {
        self.commit_term
    }
    pub fn clear_commit_term(&mut self) {
        self.commit_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_commit_term(&mut self, v: u64) {
        self.commit_term = v;
    }

    // .raft.v1.Snapshot snapshot = 9;


    pub fn get_snapshot(&self) -> &Snapshot {
        self.snapshot.as_ref().unwrap_or_else(|| <Snapshot as ::protobuf::Message>::default_instance())
    }
    pub fn clear_snapshot(&mut self) {
        self.snapshot.clear();
    }

    pub fn has_snapshot(&self) -> bool {
        self.snapshot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_snapshot(&mut self, v: Snapshot) {
        self.snapshot = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_snapshot(&mut self) -> &mut Snapshot {
        if self.snapshot.is_none() {
            self.snapshot.set_default();
        }
        self.snapshot.as_mut().unwrap()
    }

    // Take field
    pub fn take_snapshot(&mut self) -> Snapshot {
        self.snapshot.take().unwrap_or_else(|| Snapshot::new())
    }

    // uint64 request_snapshot = 13;


    pub fn get_request_snapshot(&self) -> u64 {
        self.request_snapshot
    }
    pub fn clear_request_snapshot(&mut self) {
        self.request_snapshot = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_snapshot(&mut self, v: u64) {
        self.request_snapshot = v;
    }

    // bool reject = 10;


    pub fn get_reject(&self) -> bool {
        self.reject
    }
    pub fn clear_reject(&mut self) {
        self.reject = false;
    }

    // Param is passed by value, moved
    pub fn set_reject(&mut self, v: bool) {
        self.reject = v;
    }

    // uint64 reject_hint = 11;


    pub fn get_reject_hint(&self) -> u64 {
        self.reject_hint
    }
    pub fn clear_reject_hint(&mut self) {
        self.reject_hint = 0;
    }

    // Param is passed by value, moved
    pub fn set_reject_hint(&mut self, v: u64) {
        self.reject_hint = v;
    }

    // bytes context = 12;


    pub fn get_context(&self) -> &[u8] {
        &self.context
    }
    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ::bytes::Bytes) {
        self.context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ::bytes::Bytes {
        &mut self.context
    }

    // Take field
    pub fn take_context(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.context, ::bytes::Bytes::new())
    }

    // uint64 deprecated_priority = 14;


    pub fn get_deprecated_priority(&self) -> u64 {
        self.deprecated_priority
    }
    pub fn clear_deprecated_priority(&mut self) {
        self.deprecated_priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_deprecated_priority(&mut self, v: u64) {
        self.deprecated_priority = v;
    }

    // int64 priority = 16;


    pub fn get_priority(&self) -> i64 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i64) {
        self.priority = v;
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.snapshot {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.msg_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.to = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.from = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.log_term = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.commit = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.commit_term = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.snapshot)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_snapshot = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.reject = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.reject_hint = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.context)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.deprecated_priority = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.priority = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.msg_type != MessageType::MsgHup {
            my_size += ::protobuf::rt::enum_size(1, self.msg_type);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::value_size(2, self.to, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.from != 0 {
            my_size += ::protobuf::rt::value_size(3, self.from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.log_term != 0 {
            my_size += ::protobuf::rt::value_size(5, self.log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(6, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.commit != 0 {
            my_size += ::protobuf::rt::value_size(8, self.commit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.commit_term != 0 {
            my_size += ::protobuf::rt::value_size(15, self.commit_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.snapshot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.request_snapshot != 0 {
            my_size += ::protobuf::rt::value_size(13, self.request_snapshot, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.reject != false {
            my_size += 2;
        }
        if self.reject_hint != 0 {
            my_size += ::protobuf::rt::value_size(11, self.reject_hint, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.context.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.context);
        }
        if self.deprecated_priority != 0 {
            my_size += ::protobuf::rt::value_size(14, self.deprecated_priority, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(16, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.msg_type != MessageType::MsgHup {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.msg_type))?;
        }
        if self.to != 0 {
            os.write_uint64(2, self.to)?;
        }
        if self.from != 0 {
            os.write_uint64(3, self.from)?;
        }
        if self.term != 0 {
            os.write_uint64(4, self.term)?;
        }
        if self.log_term != 0 {
            os.write_uint64(5, self.log_term)?;
        }
        if self.index != 0 {
            os.write_uint64(6, self.index)?;
        }
        for v in &self.entries {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.commit != 0 {
            os.write_uint64(8, self.commit)?;
        }
        if self.commit_term != 0 {
            os.write_uint64(15, self.commit_term)?;
        }
        if let Some(ref v) = self.snapshot.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.request_snapshot != 0 {
            os.write_uint64(13, self.request_snapshot)?;
        }
        if self.reject != false {
            os.write_bool(10, self.reject)?;
        }
        if self.reject_hint != 0 {
            os.write_uint64(11, self.reject_hint)?;
        }
        if !self.context.is_empty() {
            os.write_bytes(12, &self.context)?;
        }
        if self.deprecated_priority != 0 {
            os.write_uint64(14, self.deprecated_priority)?;
        }
        if self.priority != 0 {
            os.write_int64(16, self.priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MessageType>>(
                "msg_type",
                |m: &Message| { &m.msg_type },
                |m: &mut Message| { &mut m.msg_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "to",
                |m: &Message| { &m.to },
                |m: &mut Message| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "from",
                |m: &Message| { &m.from },
                |m: &mut Message| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &Message| { &m.term },
                |m: &mut Message| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "log_term",
                |m: &Message| { &m.log_term },
                |m: &mut Message| { &mut m.log_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &Message| { &m.index },
                |m: &mut Message| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Entry>>(
                "entries",
                |m: &Message| { &m.entries },
                |m: &mut Message| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "commit",
                |m: &Message| { &m.commit },
                |m: &mut Message| { &mut m.commit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "commit_term",
                |m: &Message| { &m.commit_term },
                |m: &mut Message| { &mut m.commit_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Snapshot>>(
                "snapshot",
                |m: &Message| { &m.snapshot },
                |m: &mut Message| { &mut m.snapshot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "request_snapshot",
                |m: &Message| { &m.request_snapshot },
                |m: &mut Message| { &mut m.request_snapshot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "reject",
                |m: &Message| { &m.reject },
                |m: &mut Message| { &mut m.reject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "reject_hint",
                |m: &Message| { &m.reject_hint },
                |m: &mut Message| { &mut m.reject_hint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "context",
                |m: &Message| { &m.context },
                |m: &mut Message| { &mut m.context },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "deprecated_priority",
                |m: &Message| { &m.deprecated_priority },
                |m: &mut Message| { &mut m.deprecated_priority },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "priority",
                |m: &Message| { &m.priority },
                |m: &mut Message| { &mut m.priority },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.msg_type = MessageType::MsgHup;
        self.to = 0;
        self.from = 0;
        self.term = 0;
        self.log_term = 0;
        self.index = 0;
        self.entries.clear();
        self.commit = 0;
        self.commit_term = 0;
        self.snapshot.clear();
        self.request_snapshot = 0;
        self.reject = false;
        self.reject_hint = 0;
        self.context.clear();
        self.deprecated_priority = 0;
        self.priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HardState {
    // message fields
    pub term: u64,
    pub vote: u64,
    pub commit: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HardState {
    fn default() -> &'a HardState {
        <HardState as ::protobuf::Message>::default_instance()
    }
}

impl HardState {
    pub fn new() -> HardState {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 vote = 2;


    pub fn get_vote(&self) -> u64 {
        self.vote
    }
    pub fn clear_vote(&mut self) {
        self.vote = 0;
    }

    // Param is passed by value, moved
    pub fn set_vote(&mut self, v: u64) {
        self.vote = v;
    }

    // uint64 commit = 3;


    pub fn get_commit(&self) -> u64 {
        self.commit
    }
    pub fn clear_commit(&mut self) {
        self.commit = 0;
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: u64) {
        self.commit = v;
    }
}

impl ::protobuf::Message for HardState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.vote = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.commit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vote != 0 {
            my_size += ::protobuf::rt::value_size(2, self.vote, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.commit != 0 {
            my_size += ::protobuf::rt::value_size(3, self.commit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.vote != 0 {
            os.write_uint64(2, self.vote)?;
        }
        if self.commit != 0 {
            os.write_uint64(3, self.commit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HardState {
        HardState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &HardState| { &m.term },
                |m: &mut HardState| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "vote",
                |m: &HardState| { &m.vote },
                |m: &mut HardState| { &mut m.vote },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "commit",
                |m: &HardState| { &m.commit },
                |m: &mut HardState| { &mut m.commit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HardState>(
                "HardState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HardState {
        static instance: ::protobuf::rt::LazyV2<HardState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HardState::new)
    }
}

impl ::protobuf::Clear for HardState {
    fn clear(&mut self) {
        self.term = 0;
        self.vote = 0;
        self.commit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HardState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HardState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfState {
    // message fields
    pub voters: ::std::vec::Vec<u64>,
    pub learners: ::std::vec::Vec<u64>,
    pub voters_outgoing: ::std::vec::Vec<u64>,
    pub learners_next: ::std::vec::Vec<u64>,
    pub auto_leave: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfState {
    fn default() -> &'a ConfState {
        <ConfState as ::protobuf::Message>::default_instance()
    }
}

impl ConfState {
    pub fn new() -> ConfState {
        ::std::default::Default::default()
    }

    // repeated uint64 voters = 1;


    pub fn get_voters(&self) -> &[u64] {
        &self.voters
    }
    pub fn clear_voters(&mut self) {
        self.voters.clear();
    }

    // Param is passed by value, moved
    pub fn set_voters(&mut self, v: ::std::vec::Vec<u64>) {
        self.voters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_voters(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.voters
    }

    // Take field
    pub fn take_voters(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.voters, ::std::vec::Vec::new())
    }

    // repeated uint64 learners = 2;


    pub fn get_learners(&self) -> &[u64] {
        &self.learners
    }
    pub fn clear_learners(&mut self) {
        self.learners.clear();
    }

    // Param is passed by value, moved
    pub fn set_learners(&mut self, v: ::std::vec::Vec<u64>) {
        self.learners = v;
    }

    // Mutable pointer to the field.
    pub fn mut_learners(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.learners
    }

    // Take field
    pub fn take_learners(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.learners, ::std::vec::Vec::new())
    }

    // repeated uint64 voters_outgoing = 3;


    pub fn get_voters_outgoing(&self) -> &[u64] {
        &self.voters_outgoing
    }
    pub fn clear_voters_outgoing(&mut self) {
        self.voters_outgoing.clear();
    }

    // Param is passed by value, moved
    pub fn set_voters_outgoing(&mut self, v: ::std::vec::Vec<u64>) {
        self.voters_outgoing = v;
    }

    // Mutable pointer to the field.
    pub fn mut_voters_outgoing(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.voters_outgoing
    }

    // Take field
    pub fn take_voters_outgoing(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.voters_outgoing, ::std::vec::Vec::new())
    }

    // repeated uint64 learners_next = 4;


    pub fn get_learners_next(&self) -> &[u64] {
        &self.learners_next
    }
    pub fn clear_learners_next(&mut self) {
        self.learners_next.clear();
    }

    // Param is passed by value, moved
    pub fn set_learners_next(&mut self, v: ::std::vec::Vec<u64>) {
        self.learners_next = v;
    }

    // Mutable pointer to the field.
    pub fn mut_learners_next(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.learners_next
    }

    // Take field
    pub fn take_learners_next(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.learners_next, ::std::vec::Vec::new())
    }

    // bool auto_leave = 5;


    pub fn get_auto_leave(&self) -> bool {
        self.auto_leave
    }
    pub fn clear_auto_leave(&mut self) {
        self.auto_leave = false;
    }

    // Param is passed by value, moved
    pub fn set_auto_leave(&mut self, v: bool) {
        self.auto_leave = v;
    }
}

impl ::protobuf::Message for ConfState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.voters)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.learners)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.voters_outgoing)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.learners_next)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auto_leave = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.voters {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.learners {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.voters_outgoing {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.learners_next {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.auto_leave != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.voters {
            os.write_uint64(1, *v)?;
        };
        for v in &self.learners {
            os.write_uint64(2, *v)?;
        };
        for v in &self.voters_outgoing {
            os.write_uint64(3, *v)?;
        };
        for v in &self.learners_next {
            os.write_uint64(4, *v)?;
        };
        if self.auto_leave != false {
            os.write_bool(5, self.auto_leave)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfState {
        ConfState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "voters",
                |m: &ConfState| { &m.voters },
                |m: &mut ConfState| { &mut m.voters },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "learners",
                |m: &ConfState| { &m.learners },
                |m: &mut ConfState| { &mut m.learners },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "voters_outgoing",
                |m: &ConfState| { &m.voters_outgoing },
                |m: &mut ConfState| { &mut m.voters_outgoing },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "learners_next",
                |m: &ConfState| { &m.learners_next },
                |m: &mut ConfState| { &mut m.learners_next },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "auto_leave",
                |m: &ConfState| { &m.auto_leave },
                |m: &mut ConfState| { &mut m.auto_leave },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConfState>(
                "ConfState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConfState {
        static instance: ::protobuf::rt::LazyV2<ConfState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConfState::new)
    }
}

impl ::protobuf::Clear for ConfState {
    fn clear(&mut self) {
        self.voters.clear();
        self.learners.clear();
        self.voters_outgoing.clear();
        self.learners_next.clear();
        self.auto_leave = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfChange {
    // message fields
    pub change_type: ConfChangeType,
    pub node_id: u64,
    pub context: ::bytes::Bytes,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfChange {
    fn default() -> &'a ConfChange {
        <ConfChange as ::protobuf::Message>::default_instance()
    }
}

impl ConfChange {
    pub fn new() -> ConfChange {
        ::std::default::Default::default()
    }

    // .raft.v1.ConfChangeType change_type = 2;


    pub fn get_change_type(&self) -> ConfChangeType {
        self.change_type
    }
    pub fn clear_change_type(&mut self) {
        self.change_type = ConfChangeType::AddNode;
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: ConfChangeType) {
        self.change_type = v;
    }

    // uint64 node_id = 3;


    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }

    // bytes context = 4;


    pub fn get_context(&self) -> &[u8] {
        &self.context
    }
    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ::bytes::Bytes) {
        self.context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ::bytes::Bytes {
        &mut self.context
    }

    // Take field
    pub fn take_context(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.context, ::bytes::Bytes::new())
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for ConfChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.change_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.context)?;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.change_type != ConfChangeType::AddNode {
            my_size += ::protobuf::rt::enum_size(2, self.change_type);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.context.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.context);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.change_type != ConfChangeType::AddNode {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.change_type))?;
        }
        if self.node_id != 0 {
            os.write_uint64(3, self.node_id)?;
        }
        if !self.context.is_empty() {
            os.write_bytes(4, &self.context)?;
        }
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfChange {
        ConfChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConfChangeType>>(
                "change_type",
                |m: &ConfChange| { &m.change_type },
                |m: &mut ConfChange| { &mut m.change_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "node_id",
                |m: &ConfChange| { &m.node_id },
                |m: &mut ConfChange| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "context",
                |m: &ConfChange| { &m.context },
                |m: &mut ConfChange| { &mut m.context },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &ConfChange| { &m.id },
                |m: &mut ConfChange| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConfChange>(
                "ConfChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConfChange {
        static instance: ::protobuf::rt::LazyV2<ConfChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConfChange::new)
    }
}

impl ::protobuf::Clear for ConfChange {
    fn clear(&mut self) {
        self.change_type = ConfChangeType::AddNode;
        self.node_id = 0;
        self.context.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfChangeSingle {
    // message fields
    pub change_type: ConfChangeType,
    pub node_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfChangeSingle {
    fn default() -> &'a ConfChangeSingle {
        <ConfChangeSingle as ::protobuf::Message>::default_instance()
    }
}

impl ConfChangeSingle {
    pub fn new() -> ConfChangeSingle {
        ::std::default::Default::default()
    }

    // .raft.v1.ConfChangeType change_type = 1;


    pub fn get_change_type(&self) -> ConfChangeType {
        self.change_type
    }
    pub fn clear_change_type(&mut self) {
        self.change_type = ConfChangeType::AddNode;
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: ConfChangeType) {
        self.change_type = v;
    }

    // uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }
}

impl ::protobuf::Message for ConfChangeSingle {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.change_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.change_type != ConfChangeType::AddNode {
            my_size += ::protobuf::rt::enum_size(1, self.change_type);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.change_type != ConfChangeType::AddNode {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.change_type))?;
        }
        if self.node_id != 0 {
            os.write_uint64(2, self.node_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfChangeSingle {
        ConfChangeSingle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConfChangeType>>(
                "change_type",
                |m: &ConfChangeSingle| { &m.change_type },
                |m: &mut ConfChangeSingle| { &mut m.change_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "node_id",
                |m: &ConfChangeSingle| { &m.node_id },
                |m: &mut ConfChangeSingle| { &mut m.node_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConfChangeSingle>(
                "ConfChangeSingle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConfChangeSingle {
        static instance: ::protobuf::rt::LazyV2<ConfChangeSingle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConfChangeSingle::new)
    }
}

impl ::protobuf::Clear for ConfChangeSingle {
    fn clear(&mut self) {
        self.change_type = ConfChangeType::AddNode;
        self.node_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfChangeSingle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChangeSingle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfChangeV2 {
    // message fields
    pub transition: ConfChangeTransition,
    pub changes: ::protobuf::RepeatedField<ConfChangeSingle>,
    pub context: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfChangeV2 {
    fn default() -> &'a ConfChangeV2 {
        <ConfChangeV2 as ::protobuf::Message>::default_instance()
    }
}

impl ConfChangeV2 {
    pub fn new() -> ConfChangeV2 {
        ::std::default::Default::default()
    }

    // .raft.v1.ConfChangeTransition transition = 1;


    pub fn get_transition(&self) -> ConfChangeTransition {
        self.transition
    }
    pub fn clear_transition(&mut self) {
        self.transition = ConfChangeTransition::Auto;
    }

    // Param is passed by value, moved
    pub fn set_transition(&mut self, v: ConfChangeTransition) {
        self.transition = v;
    }

    // repeated .raft.v1.ConfChangeSingle changes = 2;


    pub fn get_changes(&self) -> &[ConfChangeSingle] {
        &self.changes
    }
    pub fn clear_changes(&mut self) {
        self.changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_changes(&mut self, v: ::protobuf::RepeatedField<ConfChangeSingle>) {
        self.changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_changes(&mut self) -> &mut ::protobuf::RepeatedField<ConfChangeSingle> {
        &mut self.changes
    }

    // Take field
    pub fn take_changes(&mut self) -> ::protobuf::RepeatedField<ConfChangeSingle> {
        ::std::mem::replace(&mut self.changes, ::protobuf::RepeatedField::new())
    }

    // bytes context = 3;


    pub fn get_context(&self) -> &[u8] {
        &self.context
    }
    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ::bytes::Bytes) {
        self.context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ::bytes::Bytes {
        &mut self.context
    }

    // Take field
    pub fn take_context(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.context, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for ConfChangeV2 {
    fn is_initialized(&self) -> bool {
        for v in &self.changes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.transition = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.changes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.context)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.transition != ConfChangeTransition::Auto {
            my_size += ::protobuf::rt::enum_size(1, self.transition);
        }
        for value in &self.changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.context.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.context);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.transition != ConfChangeTransition::Auto {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.transition))?;
        }
        for v in &self.changes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.context.is_empty() {
            os.write_bytes(3, &self.context)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfChangeV2 {
        ConfChangeV2::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConfChangeTransition>>(
                "transition",
                |m: &ConfChangeV2| { &m.transition },
                |m: &mut ConfChangeV2| { &mut m.transition },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConfChangeSingle>>(
                "changes",
                |m: &ConfChangeV2| { &m.changes },
                |m: &mut ConfChangeV2| { &mut m.changes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "context",
                |m: &ConfChangeV2| { &m.context },
                |m: &mut ConfChangeV2| { &mut m.context },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConfChangeV2>(
                "ConfChangeV2",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConfChangeV2 {
        static instance: ::protobuf::rt::LazyV2<ConfChangeV2> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConfChangeV2::new)
    }
}

impl ::protobuf::Clear for ConfChangeV2 {
    fn clear(&mut self) {
        self.transition = ConfChangeTransition::Auto;
        self.changes.clear();
        self.context.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfChangeV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChangeV2 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntryType {
    EntryNormal = 0,
    EntryConfChange = 1,
    EntryConfChangeV2 = 2,
}

impl ::protobuf::ProtobufEnum for EntryType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntryType> {
        match value {
            0 => ::std::option::Option::Some(EntryType::EntryNormal),
            1 => ::std::option::Option::Some(EntryType::EntryConfChange),
            2 => ::std::option::Option::Some(EntryType::EntryConfChangeV2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntryType] = &[
            EntryType::EntryNormal,
            EntryType::EntryConfChange,
            EntryType::EntryConfChangeV2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EntryType>("EntryType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EntryType {
}

impl ::std::default::Default for EntryType {
    fn default() -> Self {
        EntryType::EntryNormal
    }
}

impl ::protobuf::reflect::ProtobufValue for EntryType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    MsgHup = 0,
    MsgBeat = 1,
    MsgPropose = 2,
    MsgAppend = 3,
    MsgAppendResponse = 4,
    MsgRequestVote = 5,
    MsgRequestVoteResponse = 6,
    MsgSnapshot = 7,
    MsgHeartbeat = 8,
    MsgHeartbeatResponse = 9,
    MsgUnreachable = 10,
    MsgSnapStatus = 11,
    MsgCheckQuorum = 12,
    MsgTransferLeader = 13,
    MsgTimeoutNow = 14,
    MsgReadIndex = 15,
    MsgReadIndexResp = 16,
    MsgRequestPreVote = 17,
    MsgRequestPreVoteResponse = 18,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::MsgHup),
            1 => ::std::option::Option::Some(MessageType::MsgBeat),
            2 => ::std::option::Option::Some(MessageType::MsgPropose),
            3 => ::std::option::Option::Some(MessageType::MsgAppend),
            4 => ::std::option::Option::Some(MessageType::MsgAppendResponse),
            5 => ::std::option::Option::Some(MessageType::MsgRequestVote),
            6 => ::std::option::Option::Some(MessageType::MsgRequestVoteResponse),
            7 => ::std::option::Option::Some(MessageType::MsgSnapshot),
            8 => ::std::option::Option::Some(MessageType::MsgHeartbeat),
            9 => ::std::option::Option::Some(MessageType::MsgHeartbeatResponse),
            10 => ::std::option::Option::Some(MessageType::MsgUnreachable),
            11 => ::std::option::Option::Some(MessageType::MsgSnapStatus),
            12 => ::std::option::Option::Some(MessageType::MsgCheckQuorum),
            13 => ::std::option::Option::Some(MessageType::MsgTransferLeader),
            14 => ::std::option::Option::Some(MessageType::MsgTimeoutNow),
            15 => ::std::option::Option::Some(MessageType::MsgReadIndex),
            16 => ::std::option::Option::Some(MessageType::MsgReadIndexResp),
            17 => ::std::option::Option::Some(MessageType::MsgRequestPreVote),
            18 => ::std::option::Option::Some(MessageType::MsgRequestPreVoteResponse),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::MsgHup,
            MessageType::MsgBeat,
            MessageType::MsgPropose,
            MessageType::MsgAppend,
            MessageType::MsgAppendResponse,
            MessageType::MsgRequestVote,
            MessageType::MsgRequestVoteResponse,
            MessageType::MsgSnapshot,
            MessageType::MsgHeartbeat,
            MessageType::MsgHeartbeatResponse,
            MessageType::MsgUnreachable,
            MessageType::MsgSnapStatus,
            MessageType::MsgCheckQuorum,
            MessageType::MsgTransferLeader,
            MessageType::MsgTimeoutNow,
            MessageType::MsgReadIndex,
            MessageType::MsgReadIndexResp,
            MessageType::MsgRequestPreVote,
            MessageType::MsgRequestPreVoteResponse,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageType>("MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::MsgHup
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConfChangeTransition {
    Auto = 0,
    Implicit = 1,
    Explicit = 2,
}

impl ::protobuf::ProtobufEnum for ConfChangeTransition {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConfChangeTransition> {
        match value {
            0 => ::std::option::Option::Some(ConfChangeTransition::Auto),
            1 => ::std::option::Option::Some(ConfChangeTransition::Implicit),
            2 => ::std::option::Option::Some(ConfChangeTransition::Explicit),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConfChangeTransition] = &[
            ConfChangeTransition::Auto,
            ConfChangeTransition::Implicit,
            ConfChangeTransition::Explicit,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConfChangeTransition>("ConfChangeTransition", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConfChangeTransition {
}

impl ::std::default::Default for ConfChangeTransition {
    fn default() -> Self {
        ConfChangeTransition::Auto
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChangeTransition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConfChangeType {
    AddNode = 0,
    RemoveNode = 1,
    AddLearnerNode = 2,
}

impl ::protobuf::ProtobufEnum for ConfChangeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConfChangeType> {
        match value {
            0 => ::std::option::Option::Some(ConfChangeType::AddNode),
            1 => ::std::option::Option::Some(ConfChangeType::RemoveNode),
            2 => ::std::option::Option::Some(ConfChangeType::AddLearnerNode),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConfChangeType] = &[
            ConfChangeType::AddNode,
            ConfChangeType::RemoveNode,
            ConfChangeType::AddLearnerNode,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConfChangeType>("ConfChangeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConfChangeType {
}

impl ::std::default::Default for ConfChangeType {
    fn default() -> Self {
        ConfChangeType::AddNode
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChangeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nraft.proto\x12\x07raft.v1\x1a\x0frustproto.proto\"\xad\x01\n\x05Entr\
    y\x121\n\nentry_type\x18\x01\x20\x01(\x0e2\x12.raft.v1.EntryTypeR\tentry\
    Type\x12\x12\n\x04term\x18\x02\x20\x01(\x04R\x04term\x12\x14\n\x05index\
    \x18\x03\x20\x01(\x04R\x05index\x12\x12\n\x04data\x18\x04\x20\x01(\x0cR\
    \x04data\x12\x18\n\x07context\x18\x06\x20\x01(\x0cR\x07context\x12\x19\n\
    \x08sync_log\x18\x05\x20\x01(\x08R\x07syncLog\"o\n\x10SnapshotMetadata\
    \x121\n\nconf_state\x18\x01\x20\x01(\x0b2\x12.raft.v1.ConfStateR\tconfSt\
    ate\x12\x14\n\x05index\x18\x02\x20\x01(\x04R\x05index\x12\x12\n\x04term\
    \x18\x03\x20\x01(\x04R\x04term\"U\n\x08Snapshot\x12\x12\n\x04data\x18\
    \x01\x20\x01(\x0cR\x04data\x125\n\x08metadata\x18\x02\x20\x01(\x0b2\x19.\
    raft.v1.SnapshotMetadataR\x08metadata\"\x80\x04\n\x07Message\x12/\n\x08m\
    sg_type\x18\x01\x20\x01(\x0e2\x14.raft.v1.MessageTypeR\x07msgType\x12\
    \x0e\n\x02to\x18\x02\x20\x01(\x04R\x02to\x12\x12\n\x04from\x18\x03\x20\
    \x01(\x04R\x04from\x12\x12\n\x04term\x18\x04\x20\x01(\x04R\x04term\x12\
    \x19\n\x08log_term\x18\x05\x20\x01(\x04R\x07logTerm\x12\x14\n\x05index\
    \x18\x06\x20\x01(\x04R\x05index\x12(\n\x07entries\x18\x07\x20\x03(\x0b2\
    \x0e.raft.v1.EntryR\x07entries\x12\x16\n\x06commit\x18\x08\x20\x01(\x04R\
    \x06commit\x12\x1f\n\x0bcommit_term\x18\x0f\x20\x01(\x04R\ncommitTerm\
    \x12-\n\x08snapshot\x18\t\x20\x01(\x0b2\x11.raft.v1.SnapshotR\x08snapsho\
    t\x12)\n\x10request_snapshot\x18\r\x20\x01(\x04R\x0frequestSnapshot\x12\
    \x16\n\x06reject\x18\n\x20\x01(\x08R\x06reject\x12\x1f\n\x0breject_hint\
    \x18\x0b\x20\x01(\x04R\nrejectHint\x12\x18\n\x07context\x18\x0c\x20\x01(\
    \x0cR\x07context\x12/\n\x13deprecated_priority\x18\x0e\x20\x01(\x04R\x12\
    deprecatedPriority\x12\x1a\n\x08priority\x18\x10\x20\x01(\x03R\x08priori\
    ty\"K\n\tHardState\x12\x12\n\x04term\x18\x01\x20\x01(\x04R\x04term\x12\
    \x12\n\x04vote\x18\x02\x20\x01(\x04R\x04vote\x12\x16\n\x06commit\x18\x03\
    \x20\x01(\x04R\x06commit\"\xac\x01\n\tConfState\x12\x16\n\x06voters\x18\
    \x01\x20\x03(\x04R\x06voters\x12\x1a\n\x08learners\x18\x02\x20\x03(\x04R\
    \x08learners\x12'\n\x0fvoters_outgoing\x18\x03\x20\x03(\x04R\x0evotersOu\
    tgoing\x12#\n\rlearners_next\x18\x04\x20\x03(\x04R\x0clearnersNext\x12\
    \x1d\n\nauto_leave\x18\x05\x20\x01(\x08R\tautoLeave\"\x89\x01\n\nConfCha\
    nge\x128\n\x0bchange_type\x18\x02\x20\x01(\x0e2\x17.raft.v1.ConfChangeTy\
    peR\nchangeType\x12\x17\n\x07node_id\x18\x03\x20\x01(\x04R\x06nodeId\x12\
    \x18\n\x07context\x18\x04\x20\x01(\x0cR\x07context\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x04R\x02id\"e\n\x10ConfChangeSingle\x128\n\x0bchange_type\
    \x18\x01\x20\x01(\x0e2\x17.raft.v1.ConfChangeTypeR\nchangeType\x12\x17\n\
    \x07node_id\x18\x02\x20\x01(\x04R\x06nodeId\"\x9c\x01\n\x0cConfChangeV2\
    \x12=\n\ntransition\x18\x01\x20\x01(\x0e2\x1d.raft.v1.ConfChangeTransiti\
    onR\ntransition\x123\n\x07changes\x18\x02\x20\x03(\x0b2\x19.raft.v1.Conf\
    ChangeSingleR\x07changes\x12\x18\n\x07context\x18\x03\x20\x01(\x0cR\x07c\
    ontext*H\n\tEntryType\x12\x0f\n\x0bEntryNormal\x10\0\x12\x13\n\x0fEntryC\
    onfChange\x10\x01\x12\x15\n\x11EntryConfChangeV2\x10\x02*\x8c\x03\n\x0bM\
    essageType\x12\n\n\x06MsgHup\x10\0\x12\x0b\n\x07MsgBeat\x10\x01\x12\x0e\
    \n\nMsgPropose\x10\x02\x12\r\n\tMsgAppend\x10\x03\x12\x15\n\x11MsgAppend\
    Response\x10\x04\x12\x12\n\x0eMsgRequestVote\x10\x05\x12\x1a\n\x16MsgReq\
    uestVoteResponse\x10\x06\x12\x0f\n\x0bMsgSnapshot\x10\x07\x12\x10\n\x0cM\
    sgHeartbeat\x10\x08\x12\x18\n\x14MsgHeartbeatResponse\x10\t\x12\x12\n\
    \x0eMsgUnreachable\x10\n\x12\x11\n\rMsgSnapStatus\x10\x0b\x12\x12\n\x0eM\
    sgCheckQuorum\x10\x0c\x12\x15\n\x11MsgTransferLeader\x10\r\x12\x11\n\rMs\
    gTimeoutNow\x10\x0e\x12\x10\n\x0cMsgReadIndex\x10\x0f\x12\x14\n\x10MsgRe\
    adIndexResp\x10\x10\x12\x15\n\x11MsgRequestPreVote\x10\x11\x12\x1d\n\x19\
    MsgRequestPreVoteResponse\x10\x12*<\n\x14ConfChangeTransition\x12\x08\n\
    \x04Auto\x10\0\x12\x0c\n\x08Implicit\x10\x01\x12\x0c\n\x08Explicit\x10\
    \x02*A\n\x0eConfChangeType\x12\x0b\n\x07AddNode\x10\0\x12\x0e\n\nRemoveN\
    ode\x10\x01\x12\x12\n\x0eAddLearnerNode\x10\x02B\rZ\x07raft.v1\x98\xa7\
    \x08\x01J\x9dI\n\x07\x12\x05\x10\0\xd5\x01\x01\n\x85\x05\n\x01\x0c\x12\
    \x03\x10\0\x122A\x20Copyright\x202019\x20TiKV\x20Project\x20Authors.\x20\
    Licensed\x20under\x20Apache-2.0.\n2\xb7\x04\x20Copyright\x202015\x20The\
    \x20etcd\x20Authors\n\n\x20Licensed\x20under\x20the\x20Apache\x20License\
    ,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20u\
    se\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licen\
    se.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x11\0\x10\n\x08\n\
    \x01\x08\x12\x03\x13\0\x1e\n\t\n\x02\x08\x0b\x12\x03\x13\0\x1e\n\t\n\x02\
    \x03\0\x12\x03\x15\0\x19\n\x08\n\x01\x08\x12\x03\x16\09\n\x0b\n\x04\x08\
    \xf3\x84\x01\x12\x03\x16\09\n\n\n\x02\x05\0\x12\x04\x18\0\x1c\x01\n\n\n\
    \x03\x05\0\x01\x12\x03\x18\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x19\
    \x04\x14\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x19\x04\x0f\n\x0c\n\x05\x05\
    \0\x02\0\x02\x12\x03\x19\x12\x13\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x1a\
    \x04\x18\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x1a\x04\x13\n\x0c\n\x05\
    \x05\0\x02\x01\x02\x12\x03\x1a\x16\x17\n\x0b\n\x04\x05\0\x02\x02\x12\x03\
    \x1b\x04\x1a\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x1b\x04\x15\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03\x1b\x18\x19\n\xdd\x04\n\x02\x04\0\x12\x04\
    (\02\x01\x1a\xd0\x04\x20The\x20entry\x20is\x20a\x20type\x20of\x20change\
    \x20that\x20needs\x20to\x20be\x20applied.\x20It\x20contains\x20two\x20da\
    ta\x20fields.\n\x20While\x20the\x20fields\x20are\x20built\x20into\x20the\
    \x20model;\x20their\x20usage\x20is\x20determined\x20by\x20the\x20entry_t\
    ype.\n\n\x20For\x20normal\x20entries,\x20the\x20data\x20field\x20should\
    \x20contain\x20the\x20data\x20change\x20that\x20should\x20be\x20applied.\
    \n\x20The\x20context\x20field\x20can\x20be\x20used\x20for\x20any\x20cont\
    extual\x20data\x20that\x20might\x20be\x20relevant\x20to\x20the\n\x20appl\
    ication\x20of\x20the\x20data.\n\n\x20For\x20configuration\x20changes,\
    \x20the\x20data\x20will\x20contain\x20the\x20ConfChange\x20message\x20an\
    d\x20the\n\x20context\x20will\x20provide\x20anything\x20needed\x20to\x20\
    assist\x20the\x20configuration\x20change.\x20The\x20context\n\x20if\x20f\
    or\x20the\x20user\x20to\x20set\x20and\x20use\x20in\x20this\x20case.\n\n\
    \n\n\x03\x04\0\x01\x12\x03(\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03)\x04\
    \x1d\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03)\x04\r\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03)\x0e\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03)\x1b\x1c\n\x0b\
    \n\x04\x04\0\x02\x01\x12\x03*\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03*\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03*\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03*\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03+\
    \x04\x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03+\x04\n\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03+\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03+\x13\
    \x14\n\x0b\n\x04\x04\0\x02\x03\x12\x03,\x04\x13\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03,\x04\t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03,\n\x0e\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03,\x11\x12\n\x0b\n\x04\x04\0\x02\x04\
    \x12\x03-\x04\x16\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03-\x04\t\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03-\n\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03-\x14\x15\nm\n\x04\x04\0\x02\x05\x12\x031\x04\x16\x1a`\x20Deprecated\
    !\x20It\x20is\x20kept\x20for\x20backward\x20compatibility.\n\x20TODO:\
    \x20remove\x20it\x20in\x20the\x20next\x20major\x20release.\n\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x031\x04\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x031\t\x11\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x031\x14\x15\n\n\n\x02\x04\
    \x01\x12\x044\0;\x01\n\n\n\x03\x04\x01\x01\x12\x034\x08\x18\n'\n\x04\x04\
    \x01\x02\0\x12\x036\x04\x1d\x1a\x1a\x20The\x20current\x20`ConfState`.\n\
    \n\x0c\n\x05\x04\x01\x02\0\x06\x12\x036\x04\r\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x036\x0e\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x036\x1b\x1c\n!\
    \n\x04\x04\x01\x02\x01\x12\x038\x04\x15\x1a\x14\x20The\x20applied\x20ind\
    ex.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x038\x04\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x038\x0b\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x038\
    \x13\x14\n-\n\x04\x04\x01\x02\x02\x12\x03:\x04\x14\x1a\x20\x20The\x20ter\
    m\x20of\x20the\x20applied\x20index.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\
    \x12\x03:\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03:\x0b\x0f\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03:\x12\x13\n\n\n\x02\x04\x02\x12\x04=\0@\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03=\x08\x10\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03>\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03>\x04\t\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03>\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03>\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03?\x04\"\n\x0c\n\x05\x04\
    \x02\x02\x01\x06\x12\x03?\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03?\x15\x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03?\x20!\n\n\n\x02\
    \x05\x01\x12\x04B\0V\x01\n\n\n\x03\x05\x01\x01\x12\x03B\x05\x10\n\x0b\n\
    \x04\x05\x01\x02\0\x12\x03C\x04\x0f\n\x0c\n\x05\x05\x01\x02\0\x01\x12\
    \x03C\x04\n\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03C\r\x0e\n\x0b\n\x04\x05\
    \x01\x02\x01\x12\x03D\x04\x10\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03D\
    \x04\x0b\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03D\x0e\x0f\n\x0b\n\x04\
    \x05\x01\x02\x02\x12\x03E\x04\x13\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x03E\x04\x0e\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03E\x11\x12\n\x0b\n\
    \x04\x05\x01\x02\x03\x12\x03F\x04\x12\n\x0c\n\x05\x05\x01\x02\x03\x01\
    \x12\x03F\x04\r\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03F\x10\x11\n\x0b\n\
    \x04\x05\x01\x02\x04\x12\x03G\x04\x1a\n\x0c\n\x05\x05\x01\x02\x04\x01\
    \x12\x03G\x04\x15\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03G\x18\x19\n\x0b\
    \n\x04\x05\x01\x02\x05\x12\x03H\x04\x17\n\x0c\n\x05\x05\x01\x02\x05\x01\
    \x12\x03H\x04\x12\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03H\x15\x16\n\x0b\
    \n\x04\x05\x01\x02\x06\x12\x03I\x04\x1f\n\x0c\n\x05\x05\x01\x02\x06\x01\
    \x12\x03I\x04\x1a\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03I\x1d\x1e\n\x0b\
    \n\x04\x05\x01\x02\x07\x12\x03J\x04\x14\n\x0c\n\x05\x05\x01\x02\x07\x01\
    \x12\x03J\x04\x0f\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03J\x12\x13\n\x0b\
    \n\x04\x05\x01\x02\x08\x12\x03K\x04\x15\n\x0c\n\x05\x05\x01\x02\x08\x01\
    \x12\x03K\x04\x10\n\x0c\n\x05\x05\x01\x02\x08\x02\x12\x03K\x13\x14\n\x0b\
    \n\x04\x05\x01\x02\t\x12\x03L\x04\x1d\n\x0c\n\x05\x05\x01\x02\t\x01\x12\
    \x03L\x04\x18\n\x0c\n\x05\x05\x01\x02\t\x02\x12\x03L\x1b\x1c\n\x0b\n\x04\
    \x05\x01\x02\n\x12\x03M\x04\x18\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x03M\
    \x04\x12\n\x0c\n\x05\x05\x01\x02\n\x02\x12\x03M\x15\x17\n\x0b\n\x04\x05\
    \x01\x02\x0b\x12\x03N\x04\x17\n\x0c\n\x05\x05\x01\x02\x0b\x01\x12\x03N\
    \x04\x11\n\x0c\n\x05\x05\x01\x02\x0b\x02\x12\x03N\x14\x16\n\x0b\n\x04\
    \x05\x01\x02\x0c\x12\x03O\x04\x18\n\x0c\n\x05\x05\x01\x02\x0c\x01\x12\
    \x03O\x04\x12\n\x0c\n\x05\x05\x01\x02\x0c\x02\x12\x03O\x15\x17\n\x0b\n\
    \x04\x05\x01\x02\r\x12\x03P\x04\x1b\n\x0c\n\x05\x05\x01\x02\r\x01\x12\
    \x03P\x04\x15\n\x0c\n\x05\x05\x01\x02\r\x02\x12\x03P\x18\x1a\n\x0b\n\x04\
    \x05\x01\x02\x0e\x12\x03Q\x04\x17\n\x0c\n\x05\x05\x01\x02\x0e\x01\x12\
    \x03Q\x04\x11\n\x0c\n\x05\x05\x01\x02\x0e\x02\x12\x03Q\x14\x16\n\x0b\n\
    \x04\x05\x01\x02\x0f\x12\x03R\x04\x16\n\x0c\n\x05\x05\x01\x02\x0f\x01\
    \x12\x03R\x04\x10\n\x0c\n\x05\x05\x01\x02\x0f\x02\x12\x03R\x13\x15\n\x0b\
    \n\x04\x05\x01\x02\x10\x12\x03S\x04\x1a\n\x0c\n\x05\x05\x01\x02\x10\x01\
    \x12\x03S\x04\x14\n\x0c\n\x05\x05\x01\x02\x10\x02\x12\x03S\x17\x19\n\x0b\
    \n\x04\x05\x01\x02\x11\x12\x03T\x04\x1b\n\x0c\n\x05\x05\x01\x02\x11\x01\
    \x12\x03T\x04\x15\n\x0c\n\x05\x05\x01\x02\x11\x02\x12\x03T\x18\x1a\n\x0b\
    \n\x04\x05\x01\x02\x12\x12\x03U\x04#\n\x0c\n\x05\x05\x01\x02\x12\x01\x12\
    \x03U\x04\x1d\n\x0c\n\x05\x05\x01\x02\x12\x02\x12\x03U\x20\"\n\n\n\x02\
    \x04\x03\x12\x04X\0s\x01\n\n\n\x03\x04\x03\x01\x12\x03X\x08\x0f\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03Y\x04\x1d\n\x0c\n\x05\x04\x03\x02\0\x06\x12\
    \x03Y\x04\x0f\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03Y\x10\x18\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03Y\x1b\x1c\n\x0b\n\x04\x04\x03\x02\x01\x12\x03Z\
    \x04\x12\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03Z\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03Z\x0b\r\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03Z\
    \x10\x11\n\x0b\n\x04\x04\x03\x02\x02\x12\x03[\x04\x14\n\x0c\n\x05\x04\
    \x03\x02\x02\x05\x12\x03[\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03[\
    \x0b\x0f\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03[\x12\x13\n\x0b\n\x04\
    \x04\x03\x02\x03\x12\x03\\\x04\x14\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\
    \x03\\\x04\n\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\\\x0b\x0f\n\x0c\n\
    \x05\x04\x03\x02\x03\x03\x12\x03\\\x12\x13\n\x86\x03\n\x04\x04\x03\x02\
    \x04\x12\x03b\x04\x18\x1a\xf8\x02\x20logTerm\x20is\x20generally\x20used\
    \x20for\x20appending\x20Raft\x20logs\x20to\x20followers.\x20For\x20examp\
    le,\n\x20(type=MsgAppend,index=100,log_term=5)\x20means\x20leader\x20app\
    ends\x20entries\x20starting\x20at\n\x20index=101,\x20and\x20the\x20term\
    \x20of\x20entry\x20at\x20index\x20100\x20is\x205.\n\x20(type=MsgAppendRe\
    sponse,reject=true,index=100,log_term=5)\x20means\x20follower\x20rejects\
    \x20some\n\x20entries\x20from\x20its\x20leader\x20as\x20it\x20already\
    \x20has\x20an\x20entry\x20with\x20term\x205\x20at\x20index\x20100.\n\n\
    \x0c\n\x05\x04\x03\x02\x04\x05\x12\x03b\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x04\x01\x12\x03b\x0b\x13\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03b\x16\
    \x17\n\x0b\n\x04\x04\x03\x02\x05\x12\x03c\x04\x15\n\x0c\n\x05\x04\x03\
    \x02\x05\x05\x12\x03c\x04\n\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03c\x0b\
    \x10\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03c\x13\x14\n\x0b\n\x04\x04\
    \x03\x02\x06\x12\x03d\x04\x1f\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\x03d\
    \x04\x0c\n\x0c\n\x05\x04\x03\x02\x06\x06\x12\x03d\r\x12\n\x0c\n\x05\x04\
    \x03\x02\x06\x01\x12\x03d\x13\x1a\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\
    \x03d\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x07\x12\x03e\x04\x16\n\x0c\n\x05\
    \x04\x03\x02\x07\x05\x12\x03e\x04\n\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\
    \x03e\x0b\x11\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\x03e\x14\x15\n\x0b\n\
    \x04\x04\x03\x02\x08\x12\x03f\x04\x1c\n\x0c\n\x05\x04\x03\x02\x08\x05\
    \x12\x03f\x04\n\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\x03f\x0b\x16\n\x0c\n\
    \x05\x04\x03\x02\x08\x03\x12\x03f\x19\x1b\n\x0b\n\x04\x04\x03\x02\t\x12\
    \x03g\x04\x1a\n\x0c\n\x05\x04\x03\x02\t\x06\x12\x03g\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\t\x01\x12\x03g\r\x15\n\x0c\n\x05\x04\x03\x02\t\x03\x12\x03g\
    \x18\x19\n\x0b\n\x04\x04\x03\x02\n\x12\x03h\x04!\n\x0c\n\x05\x04\x03\x02\
    \n\x05\x12\x03h\x04\n\n\x0c\n\x05\x04\x03\x02\n\x01\x12\x03h\x0b\x1b\n\
    \x0c\n\x05\x04\x03\x02\n\x03\x12\x03h\x1e\x20\n\x0b\n\x04\x04\x03\x02\
    \x0b\x12\x03i\x04\x15\n\x0c\n\x05\x04\x03\x02\x0b\x05\x12\x03i\x04\x08\n\
    \x0c\n\x05\x04\x03\x02\x0b\x01\x12\x03i\t\x0f\n\x0c\n\x05\x04\x03\x02\
    \x0b\x03\x12\x03i\x12\x14\n\x0b\n\x04\x04\x03\x02\x0c\x12\x03j\x04\x1c\n\
    \x0c\n\x05\x04\x03\x02\x0c\x05\x12\x03j\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x0c\x01\x12\x03j\x0b\x16\n\x0c\n\x05\x04\x03\x02\x0c\x03\x12\x03j\x19\
    \x1b\n\x0b\n\x04\x04\x03\x02\r\x12\x03k\x04\x17\n\x0c\n\x05\x04\x03\x02\
    \r\x05\x12\x03k\x04\t\n\x0c\n\x05\x04\x03\x02\r\x01\x12\x03k\n\x11\n\x0c\
    \n\x05\x04\x03\x02\r\x03\x12\x03k\x14\x16\n\x0b\n\x04\x04\x03\x02\x0e\
    \x12\x03l\x04$\n\x0c\n\x05\x04\x03\x02\x0e\x05\x12\x03l\x04\n\n\x0c\n\
    \x05\x04\x03\x02\x0e\x01\x12\x03l\x0b\x1e\n\x0c\n\x05\x04\x03\x02\x0e\
    \x03\x12\x03l!#\n\xdd\x02\n\x04\x04\x03\x02\x0f\x12\x03r\x04\x18\x1a\xcf\
    \x02\x20If\x20this\x20new\x20field\x20is\x20not\x20set,\x20then\x20use\
    \x20the\x20above\x20old\x20field;\x20otherwise\n\x20use\x20the\x20new\
    \x20field.\x20When\x20broadcasting\x20request\x20vote,\x20both\x20fields\
    \x20are\n\x20set\x20if\x20the\x20priority\x20is\x20larger\x20than\x200.\
    \x20This\x20change\x20is\x20not\x20a\x20fully\n\x20compatible\x20change,\
    \x20but\x20it\x20makes\x20minimal\x20impact\x20that\x20only\x20new\x20pr\
    iority\n\x20is\x20not\x20recognized\x20by\x20the\x20old\x20nodes\x20duri\
    ng\x20rolling\x20update.\n\n\x0c\n\x05\x04\x03\x02\x0f\x05\x12\x03r\x04\
    \t\n\x0c\n\x05\x04\x03\x02\x0f\x01\x12\x03r\n\x12\n\x0c\n\x05\x04\x03\
    \x02\x0f\x03\x12\x03r\x15\x17\n\n\n\x02\x04\x04\x12\x04u\0y\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03u\x08\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03v\x04\
    \x14\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03v\x04\n\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03v\x0b\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03v\x12\
    \x13\n\x0b\n\x04\x04\x04\x02\x01\x12\x03w\x04\x14\n\x0c\n\x05\x04\x04\
    \x02\x01\x05\x12\x03w\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03w\x0b\
    \x0f\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03w\x12\x13\n\x0b\n\x04\x04\
    \x04\x02\x02\x12\x03x\x04\x16\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03x\
    \x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03x\x0b\x11\n\x0c\n\x05\x04\
    \x04\x02\x02\x03\x12\x03x\x14\x15\n\x0b\n\x02\x05\x02\x12\x05{\0\x8b\x01\
    \x01\n\n\n\x03\x05\x02\x01\x12\x03{\x05\x19\n\x9d\x01\n\x04\x05\x02\x02\
    \0\x12\x03~\x04\r\x1a\x8f\x01\x20Automatically\x20use\x20the\x20simple\
    \x20protocol\x20if\x20possible,\x20otherwise\x20fall\x20back\n\x20to\x20\
    ConfChangeType::Implicit.\x20Most\x20applications\x20will\x20want\x20to\
    \x20use\x20this.\n\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03~\x04\x08\n\x0c\
    \n\x05\x05\x02\x02\0\x02\x12\x03~\x0b\x0c\n\xd1\x02\n\x04\x05\x02\x02\
    \x01\x12\x04\x85\x01\x04\x11\x1a\xc2\x02\x20Use\x20joint\x20consensus\
    \x20unconditionally,\x20and\x20transition\x20out\x20of\x20them\n\x20auto\
    matically\x20(by\x20proposing\x20a\x20zero\x20configuration\x20change).\
    \n\n\x20This\x20option\x20is\x20suitable\x20for\x20applications\x20that\
    \x20want\x20to\x20minimize\x20the\x20time\n\x20spent\x20in\x20the\x20joi\
    nt\x20configuration\x20and\x20do\x20not\x20store\x20the\x20joint\x20conf\
    iguration\n\x20in\x20the\x20state\x20machine\x20(outside\x20of\x20Initia\
    lState).\n\n\r\n\x05\x05\x02\x02\x01\x01\x12\x04\x85\x01\x04\x0c\n\r\n\
    \x05\x05\x02\x02\x01\x02\x12\x04\x85\x01\x0f\x10\n\x9a\x02\n\x04\x05\x02\
    \x02\x02\x12\x04\x8a\x01\x04\x11\x1a\x8b\x02\x20Use\x20joint\x20consensu\
    s\x20and\x20remain\x20in\x20the\x20joint\x20configuration\x20until\x20th\
    e\n\x20application\x20proposes\x20a\x20no-op\x20configuration\x20change.\
    \x20This\x20is\x20suitable\x20for\n\x20applications\x20that\x20want\x20t\
    o\x20explicitly\x20control\x20the\x20transitions,\x20for\x20example\n\
    \x20to\x20use\x20a\x20custom\x20payload\x20(via\x20the\x20Context\x20fie\
    ld).\n\n\r\n\x05\x05\x02\x02\x02\x01\x12\x04\x8a\x01\x04\x0c\n\r\n\x05\
    \x05\x02\x02\x02\x02\x12\x04\x8a\x01\x0f\x10\n\x0c\n\x02\x04\x05\x12\x06\
    \x8d\x01\0\x9a\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\x8d\x01\x08\x11\n\
    \x0c\n\x04\x04\x05\x02\0\x12\x04\x8e\x01\x04\x1f\n\r\n\x05\x04\x05\x02\0\
    \x04\x12\x04\x8e\x01\x04\x0c\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x8e\x01\
    \r\x13\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x8e\x01\x14\x1a\n\r\n\x05\x04\
    \x05\x02\0\x03\x12\x04\x8e\x01\x1d\x1e\n\x0c\n\x04\x04\x05\x02\x01\x12\
    \x04\x8f\x01\x04!\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04\x8f\x01\x04\x0c\
    \n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\x8f\x01\r\x13\n\r\n\x05\x04\x05\
    \x02\x01\x01\x12\x04\x8f\x01\x14\x1c\n\r\n\x05\x04\x05\x02\x01\x03\x12\
    \x04\x8f\x01\x1f\x20\n_\n\x04\x04\x05\x02\x02\x12\x04\x92\x01\x04(\x1aQ\
    \x20The\x20voters\x20in\x20the\x20outgoing\x20config.\x20If\x20not\x20em\
    pty\x20the\x20node\x20is\x20in\x20joint\x20consensus.\n\n\r\n\x05\x04\
    \x05\x02\x02\x04\x12\x04\x92\x01\x04\x0c\n\r\n\x05\x04\x05\x02\x02\x05\
    \x12\x04\x92\x01\r\x13\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\x92\x01\x14\
    #\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\x92\x01&'\n\xd3\x01\n\x04\x04\
    \x05\x02\x03\x12\x04\x96\x01\x04&\x1a\xc4\x01\x20The\x20nodes\x20that\
    \x20will\x20become\x20learners\x20when\x20the\x20outgoing\x20config\x20i\
    s\x20removed.\n\x20These\x20nodes\x20are\x20necessarily\x20currently\x20\
    in\x20nodes_joint\x20(or\x20they\x20would\x20have\n\x20been\x20added\x20\
    to\x20the\x20incoming\x20config\x20right\x20away).\n\n\r\n\x05\x04\x05\
    \x02\x03\x04\x12\x04\x96\x01\x04\x0c\n\r\n\x05\x04\x05\x02\x03\x05\x12\
    \x04\x96\x01\r\x13\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\x96\x01\x14!\n\
    \r\n\x05\x04\x05\x02\x03\x03\x12\x04\x96\x01$%\n\x9f\x01\n\x04\x04\x05\
    \x02\x04\x12\x04\x99\x01\x04\x18\x1a\x90\x01\x20If\x20set,\x20the\x20con\
    fig\x20is\x20joint\x20and\x20Raft\x20will\x20automatically\x20transition\
    \x20into\n\x20the\x20final\x20config\x20(i.e.\x20remove\x20the\x20outgoi\
    ng\x20config)\x20when\x20this\x20is\x20safe.\n\n\r\n\x05\x04\x05\x02\x04\
    \x05\x12\x04\x99\x01\x04\x08\n\r\n\x05\x04\x05\x02\x04\x01\x12\x04\x99\
    \x01\t\x13\n\r\n\x05\x04\x05\x02\x04\x03\x12\x04\x99\x01\x16\x17\n\x0c\n\
    \x02\x05\x03\x12\x06\x9c\x01\0\xa0\x01\x01\n\x0b\n\x03\x05\x03\x01\x12\
    \x04\x9c\x01\x05\x13\n\x0c\n\x04\x05\x03\x02\0\x12\x04\x9d\x01\x04\x13\n\
    \r\n\x05\x05\x03\x02\0\x01\x12\x04\x9d\x01\x04\x0b\n\r\n\x05\x05\x03\x02\
    \0\x02\x12\x04\x9d\x01\x11\x12\n\x0c\n\x04\x05\x03\x02\x01\x12\x04\x9e\
    \x01\x04\x13\n\r\n\x05\x05\x03\x02\x01\x01\x12\x04\x9e\x01\x04\x0e\n\r\n\
    \x05\x05\x03\x02\x01\x02\x12\x04\x9e\x01\x11\x12\n\x0c\n\x04\x05\x03\x02\
    \x02\x12\x04\x9f\x01\x04\x17\n\r\n\x05\x05\x03\x02\x02\x01\x12\x04\x9f\
    \x01\x04\x12\n\r\n\x05\x05\x03\x02\x02\x02\x12\x04\x9f\x01\x15\x16\n\x0c\
    \n\x02\x04\x06\x12\x06\xa2\x01\0\xa8\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\
    \x04\xa2\x01\x08\x12\n\x0c\n\x04\x04\x06\x02\0\x12\x04\xa3\x01\x04#\n\r\
    \n\x05\x04\x06\x02\0\x06\x12\x04\xa3\x01\x04\x12\n\r\n\x05\x04\x06\x02\0\
    \x01\x12\x04\xa3\x01\x13\x1e\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xa3\x01\
    !\"\n\x0c\n\x04\x04\x06\x02\x01\x12\x04\xa4\x01\x04\x17\n\r\n\x05\x04\
    \x06\x02\x01\x05\x12\x04\xa4\x01\x04\n\n\r\n\x05\x04\x06\x02\x01\x01\x12\
    \x04\xa4\x01\x0b\x12\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xa4\x01\x15\
    \x16\n\x0c\n\x04\x04\x06\x02\x02\x12\x04\xa5\x01\x04\x16\n\r\n\x05\x04\
    \x06\x02\x02\x05\x12\x04\xa5\x01\x04\t\n\r\n\x05\x04\x06\x02\x02\x01\x12\
    \x04\xa5\x01\n\x11\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\xa5\x01\x14\x15\
    \n\x0c\n\x04\x04\x06\x02\x03\x12\x04\xa7\x01\x04\x12\n\r\n\x05\x04\x06\
    \x02\x03\x05\x12\x04\xa7\x01\x04\n\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\
    \xa7\x01\x0b\r\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\xa7\x01\x10\x11\n\
    \x9e\x01\n\x02\x04\x07\x12\x06\xac\x01\0\xaf\x01\x01\x1a\x8f\x01\x20Conf\
    ChangeSingle\x20is\x20an\x20individual\x20configuration\x20change\x20ope\
    ration.\x20Multiple\n\x20such\x20operations\x20can\x20be\x20carried\x20o\
    ut\x20atomically\x20via\x20a\x20ConfChangeV2.\n\n\x0b\n\x03\x04\x07\x01\
    \x12\x04\xac\x01\x08\x18\n\x0c\n\x04\x04\x07\x02\0\x12\x04\xad\x01\x04#\
    \n\r\n\x05\x04\x07\x02\0\x06\x12\x04\xad\x01\x04\x12\n\r\n\x05\x04\x07\
    \x02\0\x01\x12\x04\xad\x01\x13\x1e\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\
    \xad\x01!\"\n\x0c\n\x04\x04\x07\x02\x01\x12\x04\xae\x01\x04\x17\n\r\n\
    \x05\x04\x07\x02\x01\x05\x12\x04\xae\x01\x04\n\n\r\n\x05\x04\x07\x02\x01\
    \x01\x12\x04\xae\x01\x0b\x12\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xae\
    \x01\x15\x16\n\xfb\r\n\x02\x04\x08\x12\x06\xd1\x01\0\xd5\x01\x01\x1a\xec\
    \r\x20ConfChangeV2\x20messages\x20initiate\x20configuration\x20changes.\
    \x20They\x20support\x20both\x20the\n\x20simple\x20\"one\x20at\x20a\x20ti\
    me\"\x20membership\x20change\x20protocol\x20and\x20full\x20Joint\x20Cons\
    ensus\n\x20allowing\x20for\x20arbitrary\x20changes\x20in\x20membership.\
    \n\n\x20The\x20supplied\x20context\x20is\x20treated\x20as\x20an\x20opaqu\
    e\x20payload\x20and\x20can\x20be\x20used\x20to\n\x20attach\x20an\x20acti\
    on\x20on\x20the\x20state\x20machine\x20to\x20the\x20application\x20of\
    \x20the\x20config\x20change\n\x20proposal.\x20Note\x20that\x20contrary\
    \x20to\x20Joint\x20Consensus\x20as\x20outlined\x20in\x20the\x20Raft\n\
    \x20paper[1],\x20configuration\x20changes\x20become\x20active\x20when\
    \x20they\x20are\x20*applied*\x20to\x20the\n\x20state\x20machine\x20(not\
    \x20when\x20they\x20are\x20appended\x20to\x20the\x20log).\n\n\x20The\x20\
    simple\x20protocol\x20can\x20be\x20used\x20whenever\x20only\x20a\x20sing\
    le\x20change\x20is\x20made.\n\n\x20Non-simple\x20changes\x20require\x20t\
    he\x20use\x20of\x20Joint\x20Consensus,\x20for\x20which\x20two\n\x20confi\
    guration\x20changes\x20are\x20run.\x20The\x20first\x20configuration\x20c\
    hange\x20specifies\x20the\n\x20desired\x20changes\x20and\x20transitions\
    \x20the\x20Raft\x20group\x20into\x20the\x20joint\x20configuration,\n\x20\
    in\x20which\x20quorum\x20requires\x20a\x20majority\x20of\x20both\x20the\
    \x20pre-changes\x20and\x20post-changes\n\x20configuration.\x20Joint\x20C\
    onsensus\x20avoids\x20entering\x20fragile\x20intermediate\n\x20configura\
    tions\x20that\x20could\x20compromise\x20survivability.\x20For\x20example\
    ,\x20without\x20the\n\x20use\x20of\x20Joint\x20Consensus\x20and\x20runni\
    ng\x20across\x20three\x20availability\x20zones\x20with\x20a\n\x20replica\
    tion\x20factor\x20of\x20three,\x20it\x20is\x20not\x20possible\x20to\x20r\
    eplace\x20a\x20voter\x20without\n\x20entering\x20an\x20intermediate\x20c\
    onfiguration\x20that\x20does\x20not\x20survive\x20the\x20outage\x20of\n\
    \x20one\x20availability\x20zone.\n\n\x20The\x20provided\x20ConfChangeTra\
    nsition\x20specifies\x20how\x20(and\x20whether)\x20Joint\x20Consensus\n\
    \x20is\x20used,\x20and\x20assigns\x20the\x20task\x20of\x20leaving\x20the\
    \x20joint\x20configuration\x20either\x20to\n\x20Raft\x20or\x20the\x20app\
    lication.\x20Leaving\x20the\x20joint\x20configuration\x20is\x20accomplis\
    hed\x20by\n\x20proposing\x20a\x20ConfChangeV2\x20with\x20only\x20and\x20\
    optionally\x20the\x20Context\x20field\n\x20populated.\n\n\x20For\x20deta\
    ils\x20on\x20Raft\x20membership\x20changes,\x20see:\n\n\x20[1]:\x20https\
    ://github.com/ongardie/dissertation/blob/master/online-trim.pdf\n\n\x0b\
    \n\x03\x04\x08\x01\x12\x04\xd1\x01\x08\x14\n\x0c\n\x04\x04\x08\x02\0\x12\
    \x04\xd2\x01\x04(\n\r\n\x05\x04\x08\x02\0\x06\x12\x04\xd2\x01\x04\x18\n\
    \r\n\x05\x04\x08\x02\0\x01\x12\x04\xd2\x01\x19#\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\xd2\x01&'\n\x0c\n\x04\x04\x08\x02\x01\x12\x04\xd3\x01\x04*\
    \n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\xd3\x01\x04\x0c\n\r\n\x05\x04\x08\
    \x02\x01\x06\x12\x04\xd3\x01\r\x1d\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\
    \xd3\x01\x1e%\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xd3\x01()\n\x0c\n\
    \x04\x04\x08\x02\x02\x12\x04\xd4\x01\x04\x16\n\r\n\x05\x04\x08\x02\x02\
    \x05\x12\x04\xd4\x01\x04\t\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\xd4\x01\
    \n\x11\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\xd4\x01\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
